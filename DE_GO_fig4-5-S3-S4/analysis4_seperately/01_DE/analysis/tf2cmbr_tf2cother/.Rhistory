d$pseudo<- equalizeLibSizes(d)
write.csv (d$pseudo$pseudo,"normalized_read_count.csv")
# read in norm data
data_norm <- read.csv("normalized_read_count.csv", row.names=1)
dim(data_norm)
```
MDS using dist and cmdscale
==========================
library
```{r}
library(ggplot2)
```
Prepare for MDS plot
```{r}
m <- cmdscale(dist(scale(t(data_norm))))
colnames(m) <- c("x", "y")
m<-as.data.frame(m)
```
Label for visualization
```{r}
m$sampleSection <- c(
rep("ambr", 4),
rep("aother", 4),
rep("bmbr", 3),
rep("bother", 5),
rep("cmbr", 4),
rep("cother", 4),
rep("ambr", 3),
rep("aother", 4),
rep("bmbr", 4),
rep("bother", 3),
rep("cmbr", 6),
rep("cother", 3)
)
m$genotype <- c(
rep("tf2", 24),
rep("wt", 23)
)
m$type <- c(
rep("mbr", 4),
rep("other", 4),
rep("mbr", 3),
rep("other", 5),
rep("mbr", 4),
rep("other", 4),
rep("mbr", 3),
rep("other", 4),
rep("mbr", 4),
rep("other", 3),
rep("mbr", 6),
rep("other", 3)
)
```
###All the samples
There is no visible trends, even when subsetting by sample.
```{r}
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw() + facet_grid(.~ genotype)
```
###By Genotype
There is no visible trend
```{r}
ggplot(m, aes(x,y,colour=genotype))+geom_point(size=5)+theme_bw()
```
###All together
The only time a slight trend appears is between Marginal Blastozone Regions (MBR) and rachis regions (other).
```{r}
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text()
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw()
d <- d[rowSums(cpm.d>1)>=3,]
d <- calcNormFactors(d)
d$pseudo<- equalizeLibSizes(d)
write.csv (d$pseudo$pseudo,"normalized_read_count.csv")
data_norm <- read.csv("normalized_read_count.csv", row.names=1)
dim(data_norm)
library(ggplot2)
m <- cmdscale(dist(scale(t(data_norm))))
colnames(m) <- c("x", "y")
m<-as.data.frame(m)
m$sampleSection <- c(
rep("ambr", 4),
rep("aother", 4),
rep("bmbr", 3),
rep("bother", 5),
rep("cmbr", 4),
rep("cother", 4),
rep("ambr", 3),
rep("aother", 4),
rep("bmbr", 4),
rep("bother", 3),
rep("cmbr", 6),
rep("cother", 3)
)
m$sampleSection <- c(
rep("ambr", 4),
rep("aother", 4),
rep("bmbr", 3),
rep("bother", 5),
rep("cmbr", 4),
rep("cother", 4),
rep("ambr", 3),
rep("aother", 4),
rep("bmbr", 4),
rep("bother", 3),
rep("cmbr", 6),
rep("cother", 3)
)
d$samples
counts <- subset(counts, select=-c(wtbother1.4))
counts[is.na(counts)] <- 0
group <- c(
rep("tf2ambr", 4),
rep("tf2aother", 4),
rep("tf2bmbr", 3),
rep("tf2bother", 5),
rep("tf2cmbr", 4),
rep("tf2cother", 4),
rep("wtambr", 3),
rep("wtaother", 4),
rep("wtbmbr", 4),
rep("wtbother", 3),
rep("wtcmbr", 6),
rep("wtcother", 3)
)
d <- DGEList(counts=counts, group=group)
head(d$counts)
d$samples
cpm.d<- cpm(d)
d <- d[rowSums(cpm.d>1)>=3,]
d <- calcNormFactors(d)
d$pseudo<- equalizeLibSizes(d)
write.csv (d$pseudo$pseudo,"normalized_read_count.csv")
data_norm <- read.csv("normalized_read_count.csv", row.names=1)
dim(data_norm)
m <- cmdscale(dist(scale(t(data_norm))))
colnames(m) <- c("x", "y")
m<-as.data.frame(m)
m$sampleSection <- c(
rep("ambr", 4),
rep("aother", 4),
rep("bmbr", 3),
rep("bother", 5),
rep("cmbr", 4),
rep("cother", 4),
rep("ambr", 3),
rep("aother", 4),
rep("bmbr", 4),
rep("bother", 3),
rep("cmbr", 6),
rep("cother", 3)
)
m$genotype <- c(
rep("tf2", 24),
rep("wt", 23)
)
m$type <- c(
rep("mbr", 4),
rep("other", 4),
rep("mbr", 3),
rep("other", 5),
rep("mbr", 4),
rep("other", 4),
rep("mbr", 3),
rep("other", 4),
rep("mbr", 4),
rep("other", 3),
rep("mbr", 6),
rep("other", 3)
)
```
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=sampleSection))+geom_point(size=5)+theme_bw() + facet_grid(.~ genotype)
ggplot(m, aes(x,y,colour=genotype))+geom_point(size=5)+theme_bw()
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text()
ggplot(m, aes(x,y,colour=type, label=sampleSection))+geom_point(size=1)+theme_bw() + geom_text() + facet_grid(. ~ genotype)
library(rmarkdown)
render("MDS.Rmd", "pdf_document")
render("MDS.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/tf2cmbr_wtcmbr")
setwd("~/Desktop/skeleton")
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
setwd("~/Desktop/skeleton/tf2cmbr_wtcmbr")
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
install.packages("yaml")
library(ymal)
library(yaml)
samples <- yaml.load_file("DE.yaml")
samples <- yaml.load_file("DE.yaml")
samples <- yaml.load_file("DE.yaml")
samples <- yaml.load_file("DE.yaml")
samples <- yaml.load_file("DE.yml")
samples <- yaml.load_file("de.yml")
samples <- yaml.load_file("de.yml")
samples <- yaml.load_file("de.yml")
samples <- yaml.load_file("de.yml")
samples
yaml <- yaml.load_file("de.yml")
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample1
sample2 <- yamls$sample2
sample2
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
head(counts)
summary(counts)
colnames(counts)
counts[is.na(counts)] <- 0
colnames(counts)
counts$group <- c(
rep("tf2ambr", 4),
rep("tf2aother", 4),
rep("tf2bmbr", 3),
rep("tf2bother", 5),
rep("tf2cmbr", 4),
rep("tf2cother", 4),
rep("wtambr", 3),
rep("wtaother", 4),
rep("wtbmbr", 4),
rep("wtbother", 4),
rep("wtcmbr", 6),
rep("wtcother", 3)
)
colnames(counts)
subsettedCounts <- counts[,c(16:19,42:45)]
head(subsettedCounts)
colnames(subsettedCounts)
subsettedCounts <-counts[,c(grep("wtcmbr*|tf2cmbr*")]
subsettedCounts <-counts[,c(grep("wtcmbr")]
)
subsettedCounts <-counts[,grep("wtcmbr")]
subsettedCounts <-counts[,grep("wtcmbr",counts)]
head(subsettedCounts)
colnames(counts)
subsettedCounts <-counts[,grep("wtcmbr",counts)]
head(subsettedCounts)
subsettedCounts <-counts[,grep("wtcmbr*",counts)]
subsettedCounts
subsettedCounts <-counts[,grep("wtbother3",counts)]
head(subsettedCounts)
subsettedCounts
?grep
subsettedCounts <-counts[,grep("wtbother3", names(counts), value = TRUE)]
subsettedCounts
subsettedCounts <-counts[,grep("wtbother3", names(counts))]
head(subsettedCounts)
subsettedCounts <- counts[,grep("wtbother3", names(counts))]
head(subsettedCounts)
subsettedCounts <- counts[,grep("wtbother3", names(counts), value = TRUE)]
head(subsettedCounts)
colnames(subsettedCounts)
names(counts)
subsettedCounts <- counts[,grep("wtbother3", colnames(counts), value = TRUE)]
head(subsettedCounts)
subsettedCounts <- counts[,grep("wtbother*", colnames(counts), value = TRUE)]
head(subsettedCounts)
subsettedCounts <- counts[,grep(sample1*, colnames(counts), value = TRUE)]
subsettedCounts <- counts[,grep(sample1, colnames(counts), value = TRUE)]
colnames(subsettedCounts)
subsettedCounts <- counts[,grep(sample2, colnames(counts), value = TRUE)]
subsettedCounts <- counts[,grep(sample1 | sample2, colnames(counts), value = TRUE)]
colnames(counts)
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
counts1 <- counts[,grep(sample1, colnames(counts), value = TRUE)]
cbind(counts1, counts2)
counts <- cbind(counts1, counts2)
colnames(counts)
colnames(counts)
length(colnames(counts))
length(colnames(counts1))
count1Length <- length(colnames(counts1))
count1Length
count1Length <- length(colnames(counts2))
count1Length
group <- c(rep(sample1, count1Length), rep(sample2, count2Length))
count2Length <- length(colnames(counts2))
group <- c(rep(sample1, count1Length), rep(sample2, count2Length))
d <- DGEList(counts=counts,group=group)
count1Len <- length(colnames(counts1)) #used in to specify library group.
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
count2Len <- length(colnames(counts2))
counts <- cbind(counts1, counts2)
counts
head(counts)
group <- c(rep(sample1, counts1Len), rep(sample2, counts2Len))
count1Len <- length(colnames(counts1)) #used in to specify library group in next step.
group <- c(rep(sample1, counts1Len), rep(sample2, counts2Len))
group <- c(rep(sample1, count1Len), rep(sample2, counts2Len))
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
group
d <- DGEList(counts=tf2cmbrVSwtcmbr,group=group)
d <- DGEList(counts=counts,group=group)
d$samples
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
d <- DGEList(counts=counts,group=group)
d$samples
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c(sample1,sample2))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
results.sig$ITAG <- rownames(results.sig)  #change row.names to ITAG for merging
results.sig.annotated <- merge(results.sig,annotation,by = "ITAG") #This is merging to only sig genes
results$table$itag <- rownames(results$table)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
colnames(counts)
counts1 <- counts[,grep(sample1, colnames(counts), value = TRUE)]
count1Len <- length(colnames(counts1)) #used in to specify library group in next step.
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
count2Len <- length(colnames(counts2)) #used to specify library group in next step.
counts <- cbind(counts1, counts2)
head(counts)
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
d <- DGEList(counts=counts,group=group)
d$samples
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c(sample1,sample2))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Making the only significant gene table
results.sig$ITAG <- rownames(results.sig)  #change row.names to ITAG for merging
results.sig.annotated <- merge(results.sig,annotation,by = "ITAG") #This is merging to only sig genes
#Making all table
results$table$ITAG <- rownames(results$table)
results.all.annotated <- merge(results$table, annotation,by = "ITAG")
write.table(results.all.annotated,"DE_all.txt",sep="\t",row.names=F)
write.table(results.sig.annotated,"all_DE.txt",sep="\t",row.names=F)
setwd("~/Dropbox/diffGeneExp")
setwd("~/Dropbox/diffGeneExp/tf2cmbr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "pdf_document")
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
render("../skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "pdf_document")
source('~/.active-rstudio-document', echo=TRUE)
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
```
###Read in Data
Read in raw count data per gene.
```{r, results='hide'}
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
colnames(counts)
counts1 <- counts[,grep(sample1, colnames(counts), value = TRUE)]
count1Len <- length(colnames(counts1)) #used in to specify library group in next step.
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
count2Len <- length(colnames(counts2)) #used to specify library group in next step.
counts <- cbind(counts1, counts2)
head(counts)
```
###Add column specifying library Group
Make a vector called group that will be used to make a new column named group to identify library region type.
```{r}
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
d <- DGEList(counts=counts,group=group)
```
```{r}
d$samples
```
```{r}
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c(sample1,sample2))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
summary(decideTestsDGE(DEtest,FDR=.05))
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
head(results.sig)
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
head(sig.genes)
sig.genes
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
results.sig
DEtest$table
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sig.genes
results.sig <- subset(results$table, results$table$FDR < 0.05)
results.sig
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Making the only significant gene table
results.sig$ITAG <- rownames(results.sig)  #change row.names to ITAG for merging
results.sig.annotated <- merge(results.sig,annotation,by = "ITAG") #This is merging to only sig genes
#Making all table
results$table$ITAG <- rownames(results$table)
results.all.annotated <- merge(results$table, annotation,by = "ITAG")
write.table(results.all.annotated,"DE_all.txt",sep="\t",row.names=F)
write.table(results.sig.annotated,"DE_sig.txt",sep="\t",row.names=F)
render("../skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "PDF_document")
render("skeletonDE.Rmd", "PDF_document")
render("skeletonDE.Rmd", "pdf_document")
render("skeletonDE.Rmd", "pdf_document")
render("skeletonDE.Rmd", "pdf_document")
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/waother_wtcother")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtambr_wtaother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtambr_wtbmbr")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtambr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtaother_wbother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbmbr_wtbother")
source('~/.active-rstudio-document', echo=TRUE)
write.table(results.all.annotated,"DE_all.txt",sep="\t",row.names=F)
write.table(results.sig.annotated,"DE_sig.txt",sep="\t",row.names=F)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbmbr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbother_wcother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtcmbr_wtcother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")

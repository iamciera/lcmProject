results.down <- merge(results.down,tmp.down,all=T,by = c("category","description","ontology"))
}
} #for f
results.up <- results.up[order(results.up[,length(results.up)]),] #sort by last column of results
results.down <- results.down[order(results.down[,length(results.down)]),] #sort by last column of results
write.table(results.up,paste(path,g,"TranscriptomeSPE_UP_GO.tsv",sep=""),sep="\t",row.names=F)
write.table(results.down,paste(path,g,"TranscriptromeSPE_DOWN_GO.tsv",sep=""),sep="\t",row.names=F)
} # for g
```
library(goseq)
library(GO.db)
eval.go <- function(gene.names=d$ITAG, FC=d$logFC, pval=d$PValue,
FC.thresh=0,p.thresh=.05,go.terms=NULL,
ilength=itagLength,verbose=TRUE,
go.cutoff=.1,keep.GO="BP",type="GO") {
#add GO: header if needed
head(go.terms)
if (type=="GO" & length(grep("GO",go.terms$GO[1]))==0) {
go.terms$GO <- gsub("([0-9]{7})","GO:\\1",go.terms$GO)
}
#remove extra spaces
go.terms$GO <- gsub(" +","",go.terms$GO)
#get length list to match gene names
ilength <- ilength[names(ilength) %in% gene.names]
#filter go terms to match gene list
go.terms <- go.terms[go.terms$ITAG %in% gene.names,]
#head(go.terms)
#convert go terms to list
go.list <- strsplit(as.character(go.terms$GO),split=",")
head(go.list)
names(go.list) <- go.terms$ITAG
#filter genes based on criterion
up <- as.integer(FC > FC.thresh & pval < p.thresh) #upregulated genes
names(up) <- gene.names
down <- as.integer(FC < - FC.thresh & pval < p.thresh) #downregulated genes
names(down) <- gene.names
if (verbose) {
print(summary(up))
print(summary(down))
}
#calculate bias function
up.pwf <- nullp(up,bias.data=ilength,plot.fit=F)
down.pwf <- nullp(down,bias.data=ilength,plot.fit=F)
#calculate p-values for over-representation
up.go <- goseq(up.pwf,gene2cat=go.list)
down.go <- goseq(down.pwf,gene2cat=go.list)
if (type=="GO") {#add GO term description
up.go$description <- Term(up.go$category)
up.go$ontology <- Ontology(up.go$category)
down.go$description <- Term(down.go$category)
down.go$ontology <- Ontology(down.go$category)
#filter for GO categories of interest
up.go <- up.go[up.go$ontology==keep.GO,]
down.go <- down.go[down.go$ontology==keep.GO,]
#remove NAs
up.go <- up.go[!is.na(up.go$ontology),]
down.go <- down.go[!is.na(down.go$ontology),]
}
if (type=="mapman") {#add mapman description
up.go <- merge(up.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
down.go <- merge(down.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
}
#adjust for multiple testing
up.go$upval.adjust <- p.adjust(up.go$over,"fdr")
down.go$upval.adjust <- p.adjust(down.go$over,"fdr")
#truncate to go.cutoff threshold
up.go <- up.go[up.go$upval<go.cutoff,]
down.go <- down.go[down.go$upval<go.cutoff,]
list(up=up.go,down=down.go)
}
GO.sets <- ls(pattern="GO[[:alnum:]]")
#for each GO set loaded, look for enriched terms
for (g in GO.sets) {
print(g)
tmp <- eval.go(go.terms=get(g),p.thresh=0.05)
print("up")
print(tmp$up[tmp$up$upval.adjust<.1,c(4,6)])
print("down")
print(tmp$down[tmp$down$upval.adjust<.1,c(4,6)])
print("################################")
}
#write results to file
#path for output.
path <- "./"
FDR <- c(0.01,0.05,.1) #The FDR cutoffs to test for GO enrichment
for (g in GO.sets) {
results.up <- NULL
results.down <- NULL
for (f in FDR) {
tmp <- eval.go(go.terms=get(g),p.thresh=f)
tmp.up <- tmp$up[c(1,4,5,6)]
tmp.down <- tmp$down[c(1,4,5,6)]
names(tmp.up)[4] <- paste("pval.adj.FDR",f,sep="")
names(tmp.down)[4] <- paste("pval.adj.FDR",f,sep="")
if (is.null(results.up)) {
results.up <- tmp.up
} else {
results.up <- merge(results.up,tmp.up,all=T,by = c("category","description","ontology"))
}
if (is.null(results.down)) {
results.down <- tmp.down
} else {
results.down <- merge(results.down,tmp.down,all=T,by = c("category","description","ontology"))
}
} #for f
results.up <- results.up[order(results.up[,length(results.up)]),] #sort by last column of results
results.down <- results.down[order(results.down[,length(results.down)]),] #sort by last column of results
write.table(results.up,paste(path,g,"TranscriptomeSPE_UP_GO.tsv",sep=""),sep="\t",row.names=F)
write.table(results.down,paste(path,g,"TranscriptromeSPE_DOWN_GO.tsv",sep=""),sep="\t",row.names=F)
} # for g
eval.go <- function(gene.names=d$ITAG, FC=d$logFC, pval=d$PValue,
FC.thresh=0,p.thresh=.05,go.terms=NULL,
ilength=itagLength,verbose=TRUE,
go.cutoff=.1,keep.GO="BP",type="GO") {
#add GO: header if needed
head(go.terms)
if (type=="GO" & length(grep("GO",go.terms$GO[1]))==0) {
go.terms$GO <- gsub("([0-9]{7})","GO:\\1",go.terms$GO)
}
#remove extra spaces
go.terms$GO <- gsub(" +","",go.terms$GO)
#get length list to match gene names
ilength <- ilength[names(ilength) %in% gene.names]
#filter go terms to match gene list
go.terms <- go.terms[go.terms$ITAG %in% gene.names,]
#head(go.terms)
#convert go terms to list
go.list <- strsplit(as.character(go.terms$GO),split=",")
head(go.list)
names(go.list) <- go.terms$ITAG
#filter genes based on criterion
up <- as.integer(FC > FC.thresh & pval < p.thresh) #upregulated genes
names(up) <- gene.names
down <- as.integer(FC < - FC.thresh & pval < p.thresh) #downregulated genes
names(down) <- gene.names
if (verbose) {
print(summary(up))
print(summary(down))
}
#calculate bias function
up.pwf <- nullp(up,bias.data=ilength,plot.fit=F)
down.pwf <- nullp(down,bias.data=ilength,plot.fit=F)
#calculate p-values for over-representation
up.go <- goseq(up.pwf,gene2cat=go.list)
down.go <- goseq(down.pwf,gene2cat=go.list)
if (type=="GO") {#add GO term description
up.go$description <- Term(up.go$category)
up.go$ontology <- Ontology(up.go$category)
down.go$description <- Term(down.go$category)
down.go$ontology <- Ontology(down.go$category)
#filter for GO categories of interest
up.go <- up.go[up.go$ontology==keep.GO,]
down.go <- down.go[down.go$ontology==keep.GO,]
#remove NAs
up.go <- up.go[!is.na(up.go$ontology),]
down.go <- down.go[!is.na(down.go$ontology),]
}
if (type=="mapman") {#add mapman description
up.go <- merge(up.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
down.go <- merge(down.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
}
#adjust for multiple testing
up.go$upval.adjust <- p.adjust(up.go$over,"fdr")
down.go$upval.adjust <- p.adjust(down.go$over,"fdr")
#truncate to go.cutoff threshold
up.go <- up.go[up.go$upval<go.cutoff,]
down.go <- down.go[down.go$upval<go.cutoff,]
list(up=up.go,down=down.go)
}
GO.sets <- ls(pattern="GO[[:alnum:]]")
#for each GO set loaded, look for enriched terms
for (g in GO.sets) {
print(g)
tmp <- eval.go(go.terms=get(g),p.thresh=0.05)
print("up")
print(tmp$up[tmp$up$upval.adjust<.1,c(4,6)])
print("down")
print(tmp$down[tmp$down$upval.adjust<.1,c(4,6)])
print("################################")
}
#write results to file
#path for output.
path <- "./"
FDR <- c(0.01,0.05,.1) #The FDR cutoffs to test for GO enrichment
for (g in GO.sets) {
results.up <- NULL
results.down <- NULL
for (f in FDR) {
tmp <- eval.go(go.terms=get(g),p.thresh=f)
tmp.up <- tmp$up[c(1,4,5,6)]
tmp.down <- tmp$down[c(1,4,5,6)]
names(tmp.up)[4] <- paste("pval.adj.FDR",f,sep="")
names(tmp.down)[4] <- paste("pval.adj.FDR",f,sep="")
if (is.null(results.up)) {
results.up <- tmp.up
} else {
results.up <- merge(results.up,tmp.up,all=T,by = c("category","description","ontology"))
}
if (is.null(results.down)) {
results.down <- tmp.down
} else {
results.down <- merge(results.down,tmp.down,all=T,by = c("category","description","ontology"))
}
} #for f
results.up <- results.up[order(results.up[,length(results.up)]),] #sort by last column of results
results.down <- results.down[order(results.down[,length(results.down)]),] #sort by last column of results
write.table(results.up,paste(path,g,"TranscriptomeSPE_UP_GO.tsv",sep=""),sep="\t",row.names=F)
write.table(results.down,paste(path,g,"TranscriptromeSPE_DOWN_GO.tsv",sep=""),sep="\t",row.names=F)
} # for g
eval.go <- function(gene.names=d$ITAG, FC=d$logFC, pval=d$PValue,
FC.thresh=0,p.thresh=.05,go.terms=NULL,
ilength=itagLength,verbose=TRUE,
go.cutoff=.1,keep.GO="BP",type="GO") {
#add GO: header if needed
head(go.terms)
if (type=="GO" & length(grep("GO",go.terms$GO[1]))==0) {
go.terms$GO <- gsub("([0-9]{7})","GO:\\1",go.terms$GO)
}
#remove extra spaces
go.terms$GO <- gsub(" +","",go.terms$GO)
#get length list to match gene names
ilength <- ilength[names(ilength) %in% gene.names]
#filter go terms to match gene list
go.terms <- go.terms[go.terms$ITAG %in% gene.names,]
#head(go.terms)
#convert go terms to list
go.list <- strsplit(as.character(go.terms$GO),split=",")
head(go.list)
names(go.list) <- go.terms$ITAG
#filter genes based on criterion
up <- as.integer(FC > FC.thresh & pval < p.thresh) #upregulated genes
names(up) <- gene.names
down <- as.integer(FC < - FC.thresh & pval < p.thresh) #downregulated genes
names(down) <- gene.names
if (verbose) {
print(summary(up))
print(summary(down))
}
#calculate bias function
up.pwf <- nullp(up,bias.d=ilength,plot.fit=F)
down.pwf <- nullp(down,bias.d=ilength,plot.fit=F)
#calculate p-values for over-representation
up.go <- goseq(up.pwf,gene2cat=go.list)
down.go <- goseq(down.pwf,gene2cat=go.list)
if (type=="GO") {#add GO term description
up.go$description <- Term(up.go$category)
up.go$ontology <- Ontology(up.go$category)
down.go$description <- Term(down.go$category)
down.go$ontology <- Ontology(down.go$category)
#filter for GO categories of interest
up.go <- up.go[up.go$ontology==keep.GO,]
down.go <- down.go[down.go$ontology==keep.GO,]
#remove NAs
up.go <- up.go[!is.na(up.go$ontology),]
down.go <- down.go[!is.na(down.go$ontology),]
}
if (type=="mapman") {#add mapman description
up.go <- merge(up.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
down.go <- merge(down.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
}
#adjust for multiple testing
up.go$upval.adjust <- p.adjust(up.go$over,"fdr")
down.go$upval.adjust <- p.adjust(down.go$over,"fdr")
#truncate to go.cutoff threshold
up.go <- up.go[up.go$upval<go.cutoff,]
down.go <- down.go[down.go$upval<go.cutoff,]
list(up=up.go,down=down.go)
}
GO.sets <- ls(pattern="GO[[:alnum:]]")
#for each GO set loaded, look for enriched terms
for (g in GO.sets) {
print(g)
tmp <- eval.go(go.terms=get(g),p.thresh=0.05)
print("up")
print(tmp$up[tmp$up$upval.adjust<.1,c(4,6)])
print("down")
print(tmp$down[tmp$down$upval.adjust<.1,c(4,6)])
print("################################")
}
#write results to file
#path for output.
path <- "./"
FDR <- c(0.01,0.05,.1) #The FDR cutoffs to test for GO enrichment
for (g in GO.sets) {
results.up <- NULL
results.down <- NULL
for (f in FDR) {
tmp <- eval.go(go.terms=get(g),p.thresh=f)
tmp.up <- tmp$up[c(1,4,5,6)]
tmp.down <- tmp$down[c(1,4,5,6)]
names(tmp.up)[4] <- paste("pval.adj.FDR",f,sep="")
names(tmp.down)[4] <- paste("pval.adj.FDR",f,sep="")
if (is.null(results.up)) {
results.up <- tmp.up
} else {
results.up <- merge(results.up,tmp.up,all=T,by = c("category","description","ontology"))
}
if (is.null(results.down)) {
results.down <- tmp.down
} else {
results.down <- merge(results.down,tmp.down,all=T,by = c("category","description","ontology"))
}
} #for f
results.up <- results.up[order(results.up[,length(results.up)]),] #sort by last column of results
results.down <- results.down[order(results.down[,length(results.down)]),] #sort by last column of results
write.table(results.up,paste(path,g,"TranscriptomeSPE_UP_GO.tsv",sep=""),sep="\t",row.names=F)
write.table(results.down,paste(path,g,"TranscriptromeSPE_DOWN_GO.tsv",sep=""),sep="\t",row.names=F)
} # for g
```
colnames(d)
eval.go <- function(gene.names=d$ITAG, FC=d$logFC, pval=d$PValue,
FC.thresh=0,p.thresh=.05,go.terms=NULL,
ilength=d$alignment.length,verbose=TRUE,
go.cutoff=.1,keep.GO="BP",type="GO") {
#add GO: header if needed
head(go.terms)
if (type=="GO" & length(grep("GO",go.terms$GO[1]))==0) {
go.terms$GO <- gsub("([0-9]{7})","GO:\\1",go.terms$GO)
}
#remove extra spaces
go.terms$GO <- gsub(" +","",go.terms$GO)
#get length list to match gene names
ilength <- ilength[names(ilength) %in% gene.names]
#filter go terms to match gene list
go.terms <- go.terms[go.terms$ITAG %in% gene.names,]
#head(go.terms)
#convert go terms to list
go.list <- strsplit(as.character(go.terms$GO),split=",")
head(go.list)
names(go.list) <- go.terms$ITAG
#filter genes based on criterion
up <- as.integer(FC > FC.thresh & pval < p.thresh) #upregulated genes
names(up) <- gene.names
down <- as.integer(FC < - FC.thresh & pval < p.thresh) #downregulated genes
names(down) <- gene.names
if (verbose) {
print(summary(up))
print(summary(down))
}
#calculate bias function
up.pwf <- nullp(up,bias.data=ilength,plot.fit=F)
down.pwf <- nullp(down,bias.data=ilength,plot.fit=F)
#calculate p-values for over-representation
up.go <- goseq(up.pwf,gene2cat=go.list)
down.go <- goseq(down.pwf,gene2cat=go.list)
if (type=="GO") {#add GO term description
up.go$description <- Term(up.go$category)
up.go$ontology <- Ontology(up.go$category)
down.go$description <- Term(down.go$category)
down.go$ontology <- Ontology(down.go$category)
#filter for GO categories of interest
up.go <- up.go[up.go$ontology==keep.GO,]
down.go <- down.go[down.go$ontology==keep.GO,]
#remove NAs
up.go <- up.go[!is.na(up.go$ontology),]
down.go <- down.go[!is.na(down.go$ontology),]
}
if (type=="mapman") {#add mapman description
up.go <- merge(up.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
down.go <- merge(down.go,bincodes,by.x="category",by.y="BINCODE",sort=F)
}
#adjust for multiple testing
up.go$upval.adjust <- p.adjust(up.go$over,"fdr")
down.go$upval.adjust <- p.adjust(down.go$over,"fdr")
#truncate to go.cutoff threshold
up.go <- up.go[up.go$upval<go.cutoff,]
down.go <- down.go[down.go$upval<go.cutoff,]
list(up=up.go,down=down.go)
}
GO.sets <- ls(pattern="GO[[:alnum:]]")
#for each GO set loaded, look for enriched terms
for (g in GO.sets) {
print(g)
tmp <- eval.go(go.terms=get(g),p.thresh=0.05)
print("up")
print(tmp$up[tmp$up$upval.adjust<.1,c(4,6)])
print("down")
print(tmp$down[tmp$down$upval.adjust<.1,c(4,6)])
print("################################")
}
#write results to file
#path for output.
path <- "./"
FDR <- c(0.01,0.05,.1) #The FDR cutoffs to test for GO enrichment
for (g in GO.sets) {
results.up <- NULL
results.down <- NULL
for (f in FDR) {
tmp <- eval.go(go.terms=get(g),p.thresh=f)
tmp.up <- tmp$up[c(1,4,5,6)]
tmp.down <- tmp$down[c(1,4,5,6)]
names(tmp.up)[4] <- paste("pval.adj.FDR",f,sep="")
names(tmp.down)[4] <- paste("pval.adj.FDR",f,sep="")
if (is.null(results.up)) {
results.up <- tmp.up
} else {
results.up <- merge(results.up,tmp.up,all=T,by = c("category","description","ontology"))
}
if (is.null(results.down)) {
results.down <- tmp.down
} else {
results.down <- merge(results.down,tmp.down,all=T,by = c("category","description","ontology"))
}
} #for f
results.up <- results.up[order(results.up[,length(results.up)]),] #sort by last column of results
results.down <- results.down[order(results.down[,length(results.down)]),] #sort by last column of results
write.table(results.up,paste(path,g,"TranscriptomeSPE_UP_GO.tsv",sep=""),sep="\t",row.names=F)
write.table(results.down,paste(path,g,"TranscriptromeSPE_DOWN_GO.tsv",sep=""),sep="\t",row.names=F)
} # for g
```
ls
ls
head(DEtest$table)
library(edgeR)
```
###Read in Data
Read in raw count data per gene.
```{r, results='hide'}
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
```
###Subset per DE expirement
I am going to start by subsetting the particular treatments I am looking at.
```{r}
colnames(counts)
tf2cmbrVSwtcmbr <- counts[,c(16:19,42:45)]
head(tf2cmbrVSwtcmbr)
colnames(tf2cmbrVSwtcmbr)
```
```{r}
group <- c(rep("tf2cmbr", 4), rep("wtcmbr", 4))
d <- DGEList(counts=tf2cmbrVSwtcmbr,group=group)
```
```{r}
d$samples
```
```{r}
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c("tf2cmbr","wtcmbr"))
head(DEtest$table)
sum(DEtest$table$PValue<.05)
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(DEtest$table[DEtest$table$PValue<0.05,])
plotSmear(d,de.tags=sig.genes)
```
Subset by all the ones with a significant score
```{r}
results.sig <- subset(DEtest$table, DEtest$table$PValue < 0.05)
```
What are the genes that are misexpressed?
For this we need to add some annotation
```{r, results="hide"}
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1)<- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge (annotation1,annotation2, by =1,1, all.x=TRUE)
head(annotation, results='hide')
results.annotated <- merge(results.sig,annotation,by.x="row.names",by.y="ITAG",all.x=T,sort=F)
```
head(DEtest$table)
library(edgeR)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
```
###Subset per DE expirement
I am going to start by subsetting the particular treatments I am looking at.
```{r}
colnames(counts)
tf2cmbrVSwtcmbr <- counts[,c(16:19,42:45)]
head(tf2cmbrVSwtcmbr)
colnames(tf2cmbrVSwtcmbr)
```
```{r}
group <- c(rep("tf2cmbr", 4), rep("wtcmbr", 4))
d <- DGEList(counts=tf2cmbrVSwtcmbr,group=group)
library(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
library(edgeR)
#biocLite()
biocLite()
library(edgeR)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
d <- DGEList(counts=tf2cmbrVSwtcmbr,group=group)
biocLite("limma")
library(edgeR)
library(edgeR)
library(edgeR)
biocLite("limma")
biocLite("edgeR")
biocLite("limma")
library(edgeR)
d <- DGEList(counts=tf2cmbrVSwtcmbr,group=group)
source("http://bioconductor.org/biocLite.R")
biocLite()
library(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite("limma")

rep("wtaother", 4),
rep("wtbmbr", 4),
rep("wtbother", 4),
rep("wtcmbr", 6),
rep("wtcother", 3)
)
colnames(counts)
subsettedCounts <- counts[,c(16:19,42:45)]
head(subsettedCounts)
colnames(subsettedCounts)
subsettedCounts <-counts[,c(grep("wtcmbr*|tf2cmbr*")]
subsettedCounts <-counts[,c(grep("wtcmbr")]
)
subsettedCounts <-counts[,grep("wtcmbr")]
subsettedCounts <-counts[,grep("wtcmbr",counts)]
head(subsettedCounts)
colnames(counts)
subsettedCounts <-counts[,grep("wtcmbr",counts)]
head(subsettedCounts)
subsettedCounts <-counts[,grep("wtcmbr*",counts)]
subsettedCounts
subsettedCounts <-counts[,grep("wtbother3",counts)]
head(subsettedCounts)
subsettedCounts
?grep
subsettedCounts <-counts[,grep("wtbother3", names(counts), value = TRUE)]
subsettedCounts
subsettedCounts <-counts[,grep("wtbother3", names(counts))]
head(subsettedCounts)
subsettedCounts <- counts[,grep("wtbother3", names(counts))]
head(subsettedCounts)
subsettedCounts <- counts[,grep("wtbother3", names(counts), value = TRUE)]
head(subsettedCounts)
colnames(subsettedCounts)
names(counts)
subsettedCounts <- counts[,grep("wtbother3", colnames(counts), value = TRUE)]
head(subsettedCounts)
subsettedCounts <- counts[,grep("wtbother*", colnames(counts), value = TRUE)]
head(subsettedCounts)
subsettedCounts <- counts[,grep(sample1*, colnames(counts), value = TRUE)]
subsettedCounts <- counts[,grep(sample1, colnames(counts), value = TRUE)]
colnames(subsettedCounts)
subsettedCounts <- counts[,grep(sample2, colnames(counts), value = TRUE)]
subsettedCounts <- counts[,grep(sample1 | sample2, colnames(counts), value = TRUE)]
colnames(counts)
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
counts1 <- counts[,grep(sample1, colnames(counts), value = TRUE)]
cbind(counts1, counts2)
counts <- cbind(counts1, counts2)
colnames(counts)
colnames(counts)
length(colnames(counts))
length(colnames(counts1))
count1Length <- length(colnames(counts1))
count1Length
count1Length <- length(colnames(counts2))
count1Length
group <- c(rep(sample1, count1Length), rep(sample2, count2Length))
count2Length <- length(colnames(counts2))
group <- c(rep(sample1, count1Length), rep(sample2, count2Length))
d <- DGEList(counts=counts,group=group)
count1Len <- length(colnames(counts1)) #used in to specify library group.
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
count2Len <- length(colnames(counts2))
counts <- cbind(counts1, counts2)
counts
head(counts)
group <- c(rep(sample1, counts1Len), rep(sample2, counts2Len))
count1Len <- length(colnames(counts1)) #used in to specify library group in next step.
group <- c(rep(sample1, counts1Len), rep(sample2, counts2Len))
group <- c(rep(sample1, count1Len), rep(sample2, counts2Len))
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
group
d <- DGEList(counts=tf2cmbrVSwtcmbr,group=group)
d <- DGEList(counts=counts,group=group)
d$samples
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
d <- DGEList(counts=counts,group=group)
d$samples
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c(sample1,sample2))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
results.sig$ITAG <- rownames(results.sig)  #change row.names to ITAG for merging
results.sig.annotated <- merge(results.sig,annotation,by = "ITAG") #This is merging to only sig genes
results$table$itag <- rownames(results$table)
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
colnames(counts)
counts1 <- counts[,grep(sample1, colnames(counts), value = TRUE)]
count1Len <- length(colnames(counts1)) #used in to specify library group in next step.
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
count2Len <- length(colnames(counts2)) #used to specify library group in next step.
counts <- cbind(counts1, counts2)
head(counts)
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
d <- DGEList(counts=counts,group=group)
d$samples
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c(sample1,sample2))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Making the only significant gene table
results.sig$ITAG <- rownames(results.sig)  #change row.names to ITAG for merging
results.sig.annotated <- merge(results.sig,annotation,by = "ITAG") #This is merging to only sig genes
#Making all table
results$table$ITAG <- rownames(results$table)
results.all.annotated <- merge(results$table, annotation,by = "ITAG")
write.table(results.all.annotated,"DE_all.txt",sep="\t",row.names=F)
write.table(results.sig.annotated,"all_DE.txt",sep="\t",row.names=F)
setwd("~/Dropbox/diffGeneExp")
setwd("~/Dropbox/diffGeneExp/tf2cmbr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "pdf_document")
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
render("../skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "pdf_document")
source('~/.active-rstudio-document', echo=TRUE)
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
```
###Read in Data
Read in raw count data per gene.
```{r, results='hide'}
counts <- read.delim("../sam2countsResults.tsv",row.names=1)
#check the file
head(counts)
summary(counts)
colnames(counts)
#need to convert NA to 0 counts
counts[is.na(counts)] <- 0
colnames(counts)
counts1 <- counts[,grep(sample1, colnames(counts), value = TRUE)]
count1Len <- length(colnames(counts1)) #used in to specify library group in next step.
counts2 <- counts[,grep(sample2, colnames(counts), value = TRUE)]
count2Len <- length(colnames(counts2)) #used to specify library group in next step.
counts <- cbind(counts1, counts2)
head(counts)
```
###Add column specifying library Group
Make a vector called group that will be used to make a new column named group to identify library region type.
```{r}
group <- c(rep(sample1, count1Len), rep(sample2, count2Len))
d <- DGEList(counts=counts,group=group)
```
```{r}
d$samples
```
```{r}
cpm.d <- cpm(d)
d <- d[rowSums(cpm.d>5)>=3,] #change to 5
d <- estimateCommonDisp(d,verbose=T)
d <- calcNormFactors(d)
d <- estimateCommonDisp(d)
DEtest <- exactTest(d,pair=c(sample1,sample2))
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sum(results$table$FDR<.05) # How many are DE genes?
summary(decideTestsDGE(DEtest,p.value=.05))
summary(decideTestsDGE(DEtest,FDR=.05))
summary(decideTestsDGE(DEtest,p.value=.05))
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
head(results.sig)
sig.genes <- rownames(results$table[results$table$FDR<0.05,])
head(sig.genes)
sig.genes
plotSmear(d,de.tags=sig.genes)
results.sig <- subset(DEtest$table, DEtest$table$FDR < 0.05)
results.sig
DEtest$table
head(DEtest$table)
results <- topTags(DEtest, n=Inf)
head(results)
dim(results$table)
sig.genes
results.sig <- subset(results$table, results$table$FDR < 0.05)
results.sig
annotation1<- read.delim("../ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Making the only significant gene table
results.sig$ITAG <- rownames(results.sig)  #change row.names to ITAG for merging
results.sig.annotated <- merge(results.sig,annotation,by = "ITAG") #This is merging to only sig genes
#Making all table
results$table$ITAG <- rownames(results$table)
results.all.annotated <- merge(results$table, annotation,by = "ITAG")
write.table(results.all.annotated,"DE_all.txt",sep="\t",row.names=F)
write.table(results.sig.annotated,"DE_sig.txt",sep="\t",row.names=F)
render("../skeletonDE.Rmd", "pdf_document")
render("../skeletonDE.Rmd", "PDF_document")
render("skeletonDE.Rmd", "PDF_document")
render("skeletonDE.Rmd", "pdf_document")
render("skeletonDE.Rmd", "pdf_document")
render("skeletonDE.Rmd", "pdf_document")
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/waother_wtcother")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtambr_wtaother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtambr_wtbmbr")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtambr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtaother_wbother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbmbr_wtbother")
source('~/.active-rstudio-document', echo=TRUE)
write.table(results.all.annotated,"DE_all.txt",sep="\t",row.names=F)
write.table(results.sig.annotated,"DE_sig.txt",sep="\t",row.names=F)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbmbr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtbother_wcother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/Dropbox/diffGeneExp/wtcmbr_wtcother")
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document")
setwd("~/")
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
library(edgeR)
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2cmbr_wtcmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2bother_wtbother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2bmbr_wtbmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2aother_wtaother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2ambr_wtambr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2ambr_wtambr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
geneLength <- read.csv("../normalized_genes_length.csv")
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2ambr_wtambr")
geneLength <- read.csv("../normalized_genes_length.csv")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2aother_wtaother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2bmbr_wtbmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2bother_wtbother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cmbr_wtcmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2cmbr_tf2cother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2bother_tf2cother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2bmbr_tf2cmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2bmbr_tf2bother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2aother_tf2cother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2aother_tf2bother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2ambr_tf2cmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2ambr_tf2bmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.22_analysis.tf2/tf2ambr_tf2aother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2cmbr_wtcmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2bother_wtbother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2bmbr_wtbmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2aother_wtaother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2ambr_wtambr")
setwd("~/Dropbox/diffGeneExp/2014.6.23_analysis.wtVStf2/tf2ambr_wtambr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2ambr_tf2aother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2ambr_tf2bmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2ambr_tf2cmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2aother_tf2bother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2aother_tf2cother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2bmbr_tf2bother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2bmbr_tf2cmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2bother_tf2cother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.22_analysis.tf2/tf2cmbr_tf2cother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2ambr_wtambr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2aother_wtaother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2bmbr_wtbmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2bother_wtbother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cmbr_wtcmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
yamls <- yaml.load_file("de.yml")
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
```
```{r}
library(goseq)
library(GO.db)
```
Setting up the DE table for GO analysis
-----------------
###File Input
Input the output from DE analysis.  This is made for a list that includes only the significant genes.
```{r}
sigOnly <- read.table(paste(sample1,"_",sample2,"_DE_sig.txt", sep=""), header = TRUE, fill = TRUE)
sigOnly$logFC <- as.numeric(as.character(sigOnly$logFC))
colnames(sigOnly)[1] <- "itag"
```
###Subset
First I need to subset the list to up or down regulated, then add a new colum that specififys 1.  This column is need to for merging.
```{r}
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
```
###Merge I - with normalized ITAG length gene list
read in guide.
```{r}
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
```
First merge each table to geneLength
```{r}
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
```
###Merge II - Merge them all together.
```{r}
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
```
This is if you want to write out the table of the GO matrix.
#write.table(matrixGO, "mydata.txt", sep="\t", quote= FALSE)
GO enrichment
-----------------
The is the input of the GOslim categories.  There are only two columns 1. itag and 2. go
```{r}
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
```
###Subseting for GO analysis
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`. I am going to put this into a loop, where each time the loop goes thought it will perform GO enrichment on all three types of lists of significant genes and them write them to a table.
```{r}
sigType <- c("up", "down", "all")
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_",type,"_GO.txt", sep=""))
}
```
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/2014.6.23_analysis.wtVStf2/tf2cother_wtcother")
library(rmarkdown)
library(yaml)
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))

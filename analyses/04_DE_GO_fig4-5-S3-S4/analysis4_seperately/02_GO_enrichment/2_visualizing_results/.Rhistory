ylim=c(0, 15), ylab="density",
main="Beta prior distribution")
N <- 30
y <- rbinom(N, size=1, prob=p.true)
table(y)/N
likelihood <- sapply(p, function(p) { prod(p^y * (1-p)^(1-y)) } )
plot(p, likelihood, lwd=2, las=1, bty="n", type="l")
table(y)/N
y <- rbinom(N, size=2, prob=p.true)
table(y)/N
y <- rbinom(N, size=1, prob=p.true)
table(y)/N
plot(y)
likelihood <- sapply(p, function(p) { prod(p^y * (1-p)^(1-y)) } )
plot(p, likelihood, lwd=2, las=1, bty="n", type="l")
y
p
likelihood
p
p
prod(p^y * (1-p)^(1-y)
likelihood
likelihood
y
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
p
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
plot(p, like.rescale)
sum(y)
N
beta.hyper + N - sum(y)
alpha.hyper + sum(y)
beta.hyper
alpha.hyper
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
jags.bb <- function() {
for (i in 1:N) {
y[i] ~ dbin(p, 1)
}
quit
jags.bb <- function() {
for (i in 1:N) {
y[i] ~ dbin(p, 1)
}
# prior on p
p ~ dbeta(alpha.hyper, beta.hyper)
}
write.model(jags.bb, "jagsbb.txt")
file.show("jagsbb.txt")
file.show("jagsbb.txt")
alpha.hyper <- 1
beta.hyper <- 1
?dbin
p=runif(1)
p
p=runif(1)
p
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
list(p=runif(1))
?runif
inits <- function() { list(p=runif(2)) }
inits <- function() { list(p=runif(2)) }
{ list(p=runif(2)) }
{ list(p=runif(2)) }
jagsfit <- jags.parallel(data=c("y", "N", "alpha.hyper", "beta.hyper"),
inits=inits,
parameters.to.save=c("p"),
model.file="jagsbb.txt",
n.chains=3,
n.iter=10000)
jagsfit
library(R2jags)
install.packages("R2jags")
library(R2jags)
library(R2jags)
install.packages("R2jags")
library(R2jags)
library(Rjags)
library(R2jags)
install.packages("rjags")
library(R2jags)
library(rjags)
install.packages("rjags")
jagsfit <- jags.parallel(data=c("y", "N", "alpha.hyper", "beta.hyper"),
inits=inits,
parameters.to.save=c("p"),
model.file="jagsbb.txt",
n.chains=3,
n.iter=10000)
jagsfit
install.packages("R2jags")
library(R2jags)
jagsfit.mcmc <- as.mcmc(jagsfit)
xyplot(jagsfit.mcmc)
densityplot(jagsfit.mcmc)
autocorr.plot(jagsfit.mcmc)
codamenu()
library(R.utils)
library(rstan)
library(rjags)
library(R2jags)
library(manipulate)
library(MCMCpack)
library(R2WinBUGS)
p <- seq(from=0.005, to=0.995, by=0.005)
p
manipulate( # requires RStudio
{plot(p, dbeta(p, alpha.hyper, beta.hyper),
col="blue", lwd=2, type="l", las=1, bty="n",
ylim=c(0, 8), ylab="density",
main="Beta prior distribution")
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
alpha.hyper <- 81
beta.hyper <- 219
plot(p, dbeta(p, alpha.hyper, beta.hyper),
ylim=c(0, 15), ylab="density",
col="blue", lwd=2, type="l", las=1, bty="n",
main="Beta prior distribution")
# You choose beta prior distribution depending on prior knowledge?
# How do you choose alpha and beta?
# answers well here http://stats.stackexchange.com/questions/47771/what-is-the-intuition-behind-beta-distribution
?dbeta()
?manipulate()
?rbinom
# This is sampling from a binomial distribution. "So a simulation of "observing some data"
p.true <- 0.7
N <- 30
y <- rbinom(N, size=1, prob=p.true)
table(y)/N
## Likelihood of the data at each possible value of p
## (http://en.wikipedia.org/wiki/Bernoulli_distribution)
likelihood <- sapply(p, function(p) { prod(p^y * (1-p)^(1-y)) } )
plot(p, likelihood, lwd=2, las=1, bty="n", type="l")
## (To help with visibility)
like.rescale <- 4 * likelihood/max(likelihood)
## To get the posterior, multiply Prior x Likelihood at each value of p
## Or easier: Prior is conjugate, so posterior is Beta distributed with
##   alpha = alpha + k
##   beta = beta + N - k
## Where N = sample size, k = number of "successes".
## The prior is most influential when data are sparse.
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="density",
main="Beta prior (blue) x Likelihood (black) = Beta posterior (red)")
alpha.hyper.post <- alpha.hyper + sum(y)
beta.hyper.post <- beta.hyper + N - sum(y)
lines(p, dbeta(p, alpha.hyper, beta.hyper), col="blue", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper, beta.hyper),
rep(0, length(p))), col=rgb(0, 0, 1, 0.2), border=NA)
lines(p, dbeta(p, alpha.hyper.post, beta.hyper.post), col="red", lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha.hyper.post, beta.hyper.post),
rep(0, length(p))), col=rgb(1, 0, 0, 0.2), border=NA)
lines(p, like.rescale, lwd=2)},
alpha.hyper=slider(0.1, 10, step=0.1, initial=1),
beta.hyper=slider(0.1, 10, step=0.1, initial=1))
## Inferences about the quantity of interest come from the posterior:
##   A best guess (posterior mean or mode), as well as a statement of
##   uncertainty, typically expressed as a "credible interval" or range
##   representing percent area of highest posterior density.
####################################################################################
####################################################################################
## What if an analytical solution isn't practical?
## Use fast computers and Markov chain Monte Carlo (MCMC) sampling
## JAGS = "Just Another Gibbs Sampler" to take random draws from the posterior
##   to find the shape of the posterior distribution.
## Very similar to BUGS = "Bayesian inference Using Gibbs Sampling"
# Specify the Beta-Bernoulli model
jags.bb <- function() {
for (i in 1:N) {
}
y[i] ~ dbin(p, 1)
# prior on p
p ~ dbeta(alpha.hyper, beta.hyper)
write.model(jags.bb, "jagsbb.txt")
}
file.show("jagsbb.txt")
# Specify hyperpriors and initial values
alpha.hyper <- 1
beta.hyper <- 1
inits <- function() { list(p=runif(1)) }
?runif
# Fit the model
jagsfit <- jags.parallel(data=c("y", "N", "alpha.hyper", "beta.hyper"),
inits=inits,
parameters.to.save=c("p"),
model.file="jagsbb.txt",
n.chains=3,
n.iter=10000)
jagsfit
plot(jagsfit)
traceplot(jagsfit, mfrow=c(1,1), "p")
## There are additional MCMC diagnostics in the coda package
jagsfit.mcmc <- as.mcmc(jagsfit)
xyplot(jagsfit.mcmc)
densityplot(jagsfit.mcmc)
autocorr.plot(jagsfit.mcmc)
codamenu()
install.packages("R2jags")
install.packages("rjags")
library(R2jags)
library(R2jags)
library(rjags)
library("lubridate")
install.packages("lubridate")
library("devtool")
library("devtools")
create("packageTest")
install.packages("roxygen2")
install.packages("colourlovers")
install.packages("colorspace")
library(colorspace)
library(colourlovers)
library(colourlovers)
swatch(clpalettes('random'))
swatch(clpalettes('random'))
swatch(clpalettes('random'))
clcolors('top')[[1]]
clcolors('top')[[10]]
clcolors('top')[10]
clcolors('top')[10]
?hsv
hsv(1,.5,1)
hsv(1,.5,7)
hsv(1,.5,1)
hsv(50,.5,1)
hsv(.5,.5,1)
plot(hsv(.5,.5,1))
plot(clcolors('top')[10])
plot(clcolor('00FF00'))
plot(clcolor('01FF00'))
plot(clcolor('01FG00'))
plot(clcolor('FFFFF'))
plot(clcolor('808080'))
top <- clpalettes('top')
plot(top)
lll
top[5]
top[5]$colors
top$colors[1]
setwd("~/Dropbox/Research/LCMProject/07GO_enrichment/R/R_visualizing_results_2017Sept05")
```{r}
library(ggplot2)
```
Wildtype
```{r}
allGO <- read.csv("data_output/outputFromVisualizingResults_2017Sept05_clean.csv")
dim(allGO)
head(allGO)
allGO <- allGO[,-1]
colnames(allGO)[10] <- "direction"
colnames(allGO)[12] <- "analysis"
# subset only significantly enriched
allGO <- subset(allGO, over_represented_pvalue < .05)
head(allGO)
summary(allGO$analysis)
tf2 <- c("tf2ambr_tf2aother", "tf2bmbr_tf2bother", "tf2cmbr_tf2cother")
wt <- c("wtambr_wtaother", "wtbmbr_wtbother", "wtcmbr_wtcother")
tf2_all <- subset(allGO, subset = analysis %in% tf2)
#write.csv(tf2_all, file = "./data_output/revigo_tf2_long_05Sept2017.csv")
wt_all <- subset(allGO, subset = analysis %in% wt)
#write.csv(wt_all, file = "./data_output/revigo_WT_long_05Sept2017.csv")
## For output into REVIGO
revigo_wt <- as.data.frame(unique(factor(wt_all$category)))
#write.csv(revigo_wt, file = "./data_output/revigo_WT_05Sept2017.csv")
revigo_tf2 <- as.data.frame(unique(factor(tf2_all$category)))
#write.csv(revigo_tf2, file = "./data_output/revigo_tf2_05Sept2017.csv")
```
Went to REVIGO and entered in GO terms.
```{r}
wt_BP <- read.csv("../../requisiteData/WT_REVIGO_BP.csv", skip = 4)
wt_MF <- read.csv("../../requisiteData/WT_REVIGO_MF.csv", skip = 4)
wt_CC <- read.csv("../../requisiteData/WT_REVIGO_CC.csv", skip = 4)
revigo_output <- rbind(wt_CC, wt_MF, wt_BP)
# merge with original Data
dim(revigo_output)
head(revigo_output)
colnames(revigo_output)
dim(wt_all)
colnames(wt_all)
head(wt_all)
colnames(wt_all)[1] <- "term_ID"
wt_sig_revigo <- merge(wt_all, revigo_output, by = "term_ID", all.x = TRUE)
dim(wt_sig_revigo)
head(wt_sig_revigo,50)
## Make significanve categories.
wt_sig_revigo$significance <- "NS" #makes a column where every row says "NS"
wt_sig_revigo$significance[wt_sig_revigo$over_represented_pvalue <= 0.05] <- "0.05" #labels everything less than or = to 0.05
wt_sig_revigo$significance[wt_sig_revigo$over_represented_pvalue <= 0.01] <- "0.01" #ect
wt_sig_revigo$significance[wt_sig_revigo$over_represented_pvalue <= 0.001] <- "0.001"
wt_sig_revigo$significance[wt_sig_revigo$over_represented_pvalue <= 0.0001] <- "0.0001"
head(wt_sig_revigo)
#remove NA
wt_sig_revigo <- wt_sig_revigo[complete.cases(wt_sig_revigo),]
#remove ALL
wt_sig_revigo <- subset(wt_sig_revigo, direction != "all")
str(wt_sig_revigo)
colnames(wt_sig_revigo)
```
## Visualization
```{r}
## Maybe split into more groups?
head(wt_sig_revigo)
length(levels(factor(wt_sig_revigo$term))) #335 terms
length(levels(wt_sig_revigo$representative)) # only 59
# The naming scheme is for analysis.  Since they are going to subsetted, I think I will chance the name.
wt_sig_revigo$analysis <- gsub("wtcmbr_wtcother", "base", wt_sig_revigo$analysis)
wt_sig_revigo$analysis <- gsub("wtambr_wtaother", "top", wt_sig_revigo$analysis)
wt_sig_revigo$analysis <- gsub("wtbmbr_wtbother", "mid", wt_sig_revigo$analysis)
## Make new column to seperate up and down regulated
colnames(wt_sig_revigo)
wt_sig_revigo$region <- apply(wt_sig_revigo[ , c(10,12) ] , 1 , paste , collapse = "-" )
levels(factor((wt_sig_revigo$region)))
head(wt_sig_revigo)
ggplot(wt_sig_revigo, aes(region, term, color = direction)) +
scale_color_manual(values = c( "lightskyblue", "grey")) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank()) +
geom_point(size = 3,
alpha = .7,
position = position_jitterdodge()) +
facet_grid(.~analysis,
scales = "free")
head(wt_sig_revigo)
wt_sig_revigo$significance <- as.numeric(wt_sig_revigo$significance)
wt_sig_revigo$over_represented_pvalue <- as.numeric(wt_sig_revigo$over_represented_pvalue)
## For Ordering terms in Visualization
wt_sig_revigo <- with(wt_sig_revigo, wt_sig_revigo[order(region, direction),])
wt_sig_revigo$term <- factor(wt_sig_revigo$term, levels = unique(as.character(wt_sig_revigo$term)) )
ggplot(wt_sig_revigo, aes(region, term, color = direction, size = significance)) +
scale_color_manual(values = c( "lightskyblue", "black")) +
theme_bw(base_size = 18) +
scale_size("over_represented_pval") +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank()) +
geom_point(alpha = .7) +
facet_grid(.~analysis,
scales = "free")
## Write out terms for subsetting
# terms <- as.data.frame(levels(factor(wt_sig_revigo$term)))
# write.csv(terms, "../../requisiteData/allGOterms.csv")
```
There is just wayyyyy too many GO categories, but I think we can just limit the ones we want to highlight. So I manually choose the categories that were meaningful and wanted to highlight. I exported and read in the categories I wanted to highlight for the main figure.
```{r}
term_subset <- read.csv("../../requisiteData/allGOterms_chosenSubset.csv")
term_subset <- term_subset[,-1]
term_subset$chosen <- as.factor(term_subset$chosen)
term_subset <- subset(term_subset, chosen == "1")
terms_sub <- as.vector(term_subset$levels.factor.wt_sig_revigo.term..)
wt_sig_revigo_sub <- wt_sig_revigo[wt_sig_revigo$term %in% terms_sub,]
head(wt_sig_revigo_sub)
#Change the long terms slightly
wt_sig_revigo_sub$term <- gsub("transcription factor", "TF", wt_sig_revigo_sub$term)
wt_sig_revigo_sub$term <- gsub("transmembrane", "", wt_sig_revigo_sub$term)
wt_sig_revigo_sub$term <- gsub("core promoter proximal region sequence-specific", "", wt_sig_revigo_sub$term)
wt_sig_revigo_sub$term <- gsub("\\(apurinic or apyrimidinic site\\)", "", wt_sig_revigo_sub$term)
#check
levels(factor(wt_sig_revigo_sub$term))
wt_sig_revigo_sub$term <- factor(wt_sig_revigo_sub$term)
## Make new column to seperate up and down regulated
colnames(wt_sig_revigo_sub)
wt_sig_revigo$region <- apply(wt_sig_revigo[ , c(8,9) ] , 1 , paste , collapse = "-" )
levels(factor((wt_sig_revigo$region)))
head(wt_sig_revigo)
ggplot(wt_sig_revigo, aes(analysis, representative, size = significance, color = direction)) +
scale_color_manual(values  = c( "lightblue", "black")) +
geom_point(size = 3, alpha = .6, position = position_jitterdodge())
#ordering
## For Ordering terms in Visualization
wt_sig_revigo_sub <- with(wt_sig_revigo_sub, wt_sig_revigo_sub[order(region, direction),])
wt_sig_revigo_sub$term <- factor(wt_sig_revigo_sub$term, levels = unique(as.character(wt_sig_revigo_sub$term)) )
# re- label headings.
head(wt_sig_revigo_sub)
wt_sig_revigo_sub$direction <- gsub("down", "margin", wt_sig_revigo_sub$direction)
wt_sig_revigo_sub$direction <- gsub("up", "rachis", wt_sig_revigo_sub$direction)
### Why can't I get size of significance to be correct
wt_sig_revigo_sub$significance <- as.numeric(wt_sig_revigo_sub$significance)
wt_sig_revigo_sub$over_represented_pvalue <- as.numeric(wt_sig_revigo_sub$over_represented_pvalue)
plot(wt_sig_revigo_sub$over_represented_pvalue)
ggplot(wt_sig_revigo_sub, aes(region, term, color = direction, size = over_represented_pvalue)) +
scale_color_manual(values = c( "black", "lightskyblue")) +
theme_bw()  +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
text = element_text(size = 20),
legend.position = "none") +
geom_point() +
#scale_size(range = c(3, 8)) +
scale_radius(range = c(2, 6)) +
facet_grid(.~analysis,
scales = "free")
#other way around looks ugly
ggplot(wt_sig_revigo_sub, aes(term, region, color = direction, size = significance)) +
scale_color_manual(values = c( "lightskyblue", "black")) +
theme_bw()  +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_point() +
scale_size(range = c(2, 5)) +
facet_grid(analysis~.,
scales = "free") +
theme(legend.position = "none")
```
ggplot(wt_sig_revigo_sub, aes(region, term, color = direction, size = over_represented_pvalue)) +
scale_color_manual(values = c( "black", "lightskyblue")) +
theme_bw()  +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
text = element_text(size = 20),
legend.position = "none") +
geom_point() +
#scale_size(range = c(3, 8)) +
scale_radius(range = c(2, 6)) +
facet_grid(.~analysis,
scales = "free")
ggplot(wt_sig_revigo_sub, aes(region, term, color = direction, size = over_represented_pvalue)) +
scale_color_manual(values = c( "grey", "lightskyblue")) +
theme_bw()  +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
text = element_text(size = 20),
legend.position = "none") +
geom_point() +
#scale_size(range = c(3, 8)) +
scale_radius(range = c(2, 6)) +
facet_grid(.~analysis,
scales = "free")

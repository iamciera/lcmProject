#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
write.table(t, "DE1_sigonly_GO.txt")
write.table(GO.wall, "DE1_sigValues_GO.txt")
}
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
write.table(t, paste1("../data/output/DE1_sigonly_GO_", type, ".txt"))
write.table(GO.wall, paste1("../data/output/DE1_sigValues_GO_", type, ".txt"))
}
sigType <- c("up", "down", "all")
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
}
## To write out as dataframes
paste0("t_", type) <- t
## To write out as dataframes
assign(paste0("t_", type),t)
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
## write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
## write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
## To write out as dataframes
assign(paste0("t_", type),t)
}
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
## write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
## write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
## To write out as dataframes
t$type <- type
GO.wall$type <- type
assign(paste0("t_", type), t)
assign(paste0("GO.wall_", t, GO.wall))
}
t$type <- type
t
t_all$type <- "all"
t_all
t_all
print(t) #this is for the knitr document
print(t) #this is for the knitr document
as.data.frame(assign(paste0("t_", type), t))
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
## write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
## write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
as.data.frame(assign(paste0("t_", type), t))
as.data.frame(assign(paste0("GO.wall_", t, GO.wall)))
}
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
## write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
## write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
assign(paste0("t_", type), as.data.frame(t)))
assign(paste0("GO.wall_", t, as.data.frame(GO.wall)))
}
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
## write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
## write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
assign(paste0("t_", type), as.data.frame(t))
assign(paste0("GO.wall_", t, as.data.frame(GO.wall)))
}
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
write.table(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
write.table(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
}
## Now just concatenate together
all <- read.table("../data/output/DE1_sigonly_GO_all.txt)
)
)
## Now just concatenate together
all <- read.table("../data/output/DE1_sigonly_GO_all.txt")
all
colnames(all)
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
write.csv(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
write.csv(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
}
## Now just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all
colnames(x)
colnames(all)
all$type <- "all"
all$type <- "up"
down$type <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
everything<- rbind(down, up, all)
everything <- rbind(down, up, all)
## This is a long way of doing it. But basically I want all the results in a single dataframe.
## So just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all$type <- "all"
up <- read.csv("../data/output/DE1_sigonly_GO_up.txt")
all$type <- "up"
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
everything <- rbind(down, up, all)
all
up
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all$type <- "all"
up <- read.csv("../data/output/DE1_sigonly_GO_up.txt")
all$type <- "up"
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
everything <- rbind(down, up, all)
head(all)
## This is a long way of doing it. But basically I want all the results in a single dataframe.
## So just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all$type <- "all"
head(all)
up <- read.csv("../data/output/DE1_sigonly_GO_up.txt")
up$type <- "up"
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
everything <- rbind(down, up, all)
write.csv(everything, "../data/output/wt_modelled_GO.csv")
as.matrix(my.GO.table)
enriched.GO
colnanmes(everything) <
head(everything)
colnames(everything)
colnames(everything) <
head(everything)
print(t) #this is for the knitr document
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
write.csv(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
write.csv(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
}
## This is a long way of doing it. But basically I want all the results in a single dataframe.
## So just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all$type <- "all"
up <- read.csv("../data/output/DE1_sigonly_GO_up.txt")
up$type <- "up"
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
everything <- rbind(down, up, all)
colnames(everything)
colnames(everything) <
head(everything)
## This is a long way of doing it. But basically I want all the results in a single dataframe.
## So just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all$type <- "all"
up <- read.csv("../data/output/DE1_sigonly_GO_up.txt")
up$type <- "up"
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down$type <- "down"
down
up
all
everything <- rbind(down, up, all)
everything
colnames(everything)
head(everything)
colnames(everything) <- c("GO_ID", "GO_term", "type")
head(everything)
write.csv(everything, "../data/output/wt_modelled_GO.csv")
all <- read.csv("../data/output/DE1_sigValues_GO_all.txt")
all$type <- "all"
up <- read.csv("../data/output/DE1_sigValues_GO_up.txt")
up$type <- "up"
down <- read.csv("../data/output/DE1_sigValues_GO_down.txt")
down$type <- "down"
head(everything)
everything <- rbind(down, up, all)
head(everything)
everything <- everything[,-1]
write.csv(everything, "../data/output/wt_modelled_GO_with_sig_values.csv")
# To re-run normalization
source("01_normalization.R") # Takes about a thirty seconds to run.
## First I need to subset based on genotype
colnames(y)
wtY <- y[,23:45]
## This comes from normalization.R
designTable
## First I need to subset based on genotype
colnames(y)
## First I need to subset based on genotype
colnames(y)
tf2Y <- y[,1:22]
## This comes from normalization.R
designTable
designTableWT <- designTable[1:22,]
designTabletf2 <- designTable[1:22,]
designTable_tf2 <- designTable[1:22,]
designTable_tf2
tf2Region <- designTable_tf2$region
tf2Region <- designTable_tf2$region
tf2Tissue <- designTable_tf2$tissue
design <- model.matrix(~tf2Region + tf2Tissue)
rownames(design) <- colnames(tf2Y)
design
str(tf2Y)
tf2Y <- estimateDisp(wtY, design, robust = TRUE) #Estimate Dispersion
tf2Y <- estimateDisp(tf2Y, design, robust = TRUE) #Estimate Dispersion
tf2Y$common.dispersion # 0.196092
fit <- glmFit(tf2Y, design)
lrt <- glmLRT(fit)
o <- order(lrt$table$PValue)
cpm(wtY)[o[1:10],] #check to see differences
cpm(tf2Y)[o[1:10],] #check to see differences
summary(de <- decideTestsDGE(lrt))
detags <- rownames(y)[as.logical(de)]
plotSmear(lrt, de.tags = detags)
results <- topTags(lrt, n = Inf)
dim(results$table)
summary(de <- decideTestsDGE(lrt))
sum(results$table$FDR < .05) # How many are DE genes total? #816 or #2015
plotSmear(lrt, de.tags = detags, xlab="Average logCPM", ylab="logFC",)
dev.off()
plotSmear(lrt, de.tags = detags, xlab="Average logCPM", ylab="logFC",)
summary(de <- decideTestsDGE(lrt))
sum(results$table$FDR < .05) # 361
#Subset only significant
results.sig <- subset(results$table, results$table$FDR < 0.05)
sig.genes <- results.sig$genes #only gene names
length(sig.genes)
annotation1 <- read.delim("../data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header = FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2 <- read.delim("../data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
## head(annotation)
colnames(annotation)
colnames(results.sig)
annotation$ITAG <- gsub("^(.*)[.].*", "\\1", annotation$ITAG)
annotation$ITAG <- gsub("^(.*)[.].*", "\\1", annotation$ITAG)
#Change headers for merging
colnames(results.sig)[1] <- "ITAG"
colnames(annotation)[1] <- "ITAG"
colnames(results$table)[1] <- "ITAG"
results.sig.annotated <- merge(results.sig, annotation, by = "ITAG", all.x = TRUE) #This is merging only sig genes
dim(results.sig.annotated)
head(results.sig.annotated)
#Making all table
head(results$table)
results.all.annotated <- merge(results$table, annotation, by = "ITAG")
#Write out table to file
write.table(results.all.annotated, file = "../data/output/tf2.question1_all_08January2018.txt", sep = "\t",row.names = F)
write.csv(results.sig.annotated, file = "../data/output/tf2.question1.onlysig_0.05_.txt", row.names = F)
library(tidyr)
library(goseq)
library(GO.db)
sigOnly <- read.csv("../data/output/tf2.question1.onlysig_0.05_.txt", header = TRUE)
head(sigOnly)
sigOnly$logFC <- as.numeric(as.character(sigOnly$logFC))
colnames(sigOnly)[1] <- "itag"
head(sigOnly)
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
geneLength <- read.csv("../data/normalized_genes_length.csv")
## remove trailing numbers in ITAG
geneLength$itag <- gsub("^(.*)[.].*", "\\1", geneLength$itag)
geneLength$itag <- gsub("^(.*)[.].*", "\\1", geneLength$itag)
#isolate just the gene list
genes <- subset(geneLength, select = c(itag))
head(genes)
dim(genes)
head(upITAG)
upITAGmerge <- merge(genes, upITAG, by = "itag", all = TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all = TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all = TRUE)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
pat <- matrixGO
head(pat)
## New GO table
cate <- read.table("../data/ITAG3.2_protein_go.tsv")
colnames(cate) <- c("itag", "go")
summary(cate$itag)
## remove the trailing num in itag id
cate$itag <- gsub("^(.*)[.].*", "\\1", cate$itag)
cate$itag <- gsub("^(.*)[.].*", "\\1", cate$itag)
## Check
head(cate)
cate_2 <- separate(data = cate, col = go, into = c("go1", "go2", "g04", "go5", "go6", "go7", "go8", "go9"), sep = "\\|")
## Check it out
head(cate_2)
cate_3 <- gather(cate_2, itag, go1:go9, factor_key = TRUE)
colnames(cate_3)[3] <- "go"
## You can see here what the gather function did exactly and what needs to be fixed.
test <- subset(cate_3, itag == "Solyc00g005000")
## To Fix
## First remove rows with NA in go
cate_4 <- cate_3[complete.cases(cate_3), ]
## Now every go term and itag pair is represented only once, so we can get rid of itag.1 column
cate_5 <- cate_4[,-2]
cate <- cate_5
sigType <- c("up", "down", "all")
for (type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes, bias.data = pat$length)
GO.wall = goseq(pwf, gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
## To write out tables
write.csv(t, paste0("../data/output/DE1_sigonly_GO_", type, ".txt"))
write.csv(GO.wall, paste0("../data/output/DE1_sigValues_GO_", type, ".txt"))
}
## This is a long way of doing it. But basically I want all the results in a single dataframe.
## So just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all$type <- "all"
## This is a long way of doing it. But basically I want all the results in a single dataframe.
## So just concatenate together
all <- read.csv("../data/output/DE1_sigonly_GO_all.txt")
all
up <- read.csv("../data/output/DE1_sigonly_GO_up.txt")
up
down <- read.csv("../data/output/DE1_sigonly_GO_down.txt")
down
go_terms <- read.csv("../data/output/wt_modelled_GO.csv")
go_terms <- read.csv("../data/output/wt_modelled_GO.csv")
head(go_terms)
summary(go_terms$type)
head(go_terms)
View(go_terms)

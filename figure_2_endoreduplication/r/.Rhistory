ssom <- supersom(all.data, somgrid(6, 6, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
plot(ssom, type = "codes")
#keep only needed columns (gene, genotype, type, mean)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)]
#Change from long to wide data format
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
# to keep attributes associated
mostDEgene.long <- mostDEgene.long[,c(1:8)]
```
## SuperSOM
First we need to get the data scaled and in the correct format. In this example each genoype was scaled seperatly then brought back together in a list. Each gene will be represented twice.
```{r}
tf2 <- as.matrix(subset(mostDEgene.long, genotype == "tf2", select = 3:8))
wt <- as.matrix(subset(mostDEgene.long, genotype == "wt", select = 3:8))
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes.csv")
#keep only needed columns (gene, genotype, type, mean)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)]
#Change from long to wide data format
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
# to keep attributes associated
mostDEgene.long <- mostDEgene.long[,c(1:8)]
```
## SuperSOM
First we need to get the data scaled and in the correct format. In this example each genoype was scaled seperatly then brought back together in a list. Each gene will be represented twice.
```{r}
tf2 <- as.matrix(subset(mostDEgene.long, genotype == "tf2", select = 3:8))
wt <- as.matrix(subset(mostDEgene.long, genotype == "wt", select = 3:8))
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
all.data <- list(sc.wt,sc.tf2)
str(all.data)
```
Super SOM
```{r}
set.seed(2)
ssom <- supersom(all.data, somgrid(6, 6, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
```
Notice the number of layers are now two.  You could have more genotypes or different types of layers, like treatment. All depends on the experiment.
Let's look at the super SOM results. Now when you run the plots, you will get two plots
```{r}
plot(ssom, type ="changes")
plot(ssom, type ="changes")
plot(ssom, type = "codes")
plot(ssom, type = "quality")
data.val <- cbind(data.val,ssom$unit.classif,ssom$distances)
head(data.val)
write.table(data.val, file="../data/ssom.data.analysis5d.txt")
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5b.csv")
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
#Change from long to wide data format
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
mostDEgene.long <- as.data.frame(mostDEgene.long)
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5b.csv")
setwd("~/Dropbox/Research/LCMProject/08SOM/lcmSOM/r")
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes_analysis5b.csv")
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)] #keep only needed columns (gene, genotype, type, mean)
head(mostDEgenes)
#Change from long to wide data format
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")  #why did I have to specify "mean" here? Are there duplicates of types? Double check later.
head(mostDEgene.long)
setwd("~/git.repos/SOMexample/r")
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes.csv")
#keep only needed columns (gene, genotype, type, mean)
mostDEgenes <- mostDEgenes[c(7, 2, 1, 4)]
#Change from long to wide data format
mostDEgene.long <- cast(mostDEgenes, genotype + gene ~ type, value.var = mean, fun.aggregate = "mean")
# to keep attributes associated
mostDEgene.long <- as.data.frame(mostDEgene.long)
tf2 <- as.matrix(subset(mostDEgene.long, genotype == "tf2", select = 3:8))
wt <- as.matrix(subset(mostDEgene.long, genotype == "wt", select = 3:8))
wt <- as.matrix(wt)
tf2 <- as.matrix(tf2)
sc.wt <- t(scale(t(wt)))
sc.tf2 <- t(scale(t(tf2)))
all.data <- list(sc.wt,sc.tf2)
str(all.data)
```
set.seed(2)
ssom <- supersom(all.data, somgrid(6, 6, "hexagonal"),weights=c(0.5,0.5))
summary(ssom)
```
plot(ssom, type = "counts")
plot(ssom, type = "codes")
mostDEgene.long <- as.data.frame(mostDEgene.long)
names(mostDEgene.long)
scale_data <- as.matrix(t(scale(t(mostDEgene.long[c(3:8)]))))
head(scale_data)
#Principle Component Analysis
pca <- prcomp(scale_data, scale=TRUE)
summary(pca)
pca.scores <- data.frame(pca$x)
data.val <- cbind(mostDEgene.long, scale_data, pca.scores)
str(data.val)
p <- ggplot(data.val, aes(PC1, PC2))
p + geom_point()
data.val <- cbind(data.val,ssom$unit.classif,ssom$distances)
head(data.val)
data.val <- plot.data
names(plot.data)
plot.data <- data.val
names(plot.data)
dim(plot.data)
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(ssom.unit.classif)))
p + geom_point() + theme_bw()
names(plot.data)
colnames(plot.data)[21] <- ssom.unit.classif
colnames(plot.data)[21] <- "ssom.unit.classif""
colnames(plot.data)[21] <- "ssom.unit.classif"
colnames(plot.data)[21] <- "ssom.unit.classif"
colnames(plot.data)[21] <- "ssom.unit.distances"
colnames(plot.data)[21] <- "ssom.unit.classif"
colnames(plot.data)[22] <- "ssom.unit.distances"
p <- ggplot(plot.data, aes(PC1, PC2, colour=factor(ssom.unit.classif)))
p + geom_point() + theme_bw()
plot.data <- read.table("../data/ssom.data.analysis5d.txt",header=TRUE)
write.table(data.val, file="../data/ssom.data.txt")
plot.data <- read.table("../data/ssom.data.txt",header=TRUE)
names(plot.data)
head(plot.data)
setwd("~/git.repos/SOMexample/r")
geneLength <- read.csv("../data//normalized_genes_length.csv")
cate <- read.table("../data/melted.GOTable.txt",header=TRUE)
clusterVis <- function(clustNum){
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 9:14)] # just the sample types
m.data <- melt(sub_data)
p <- ggplot(m.data, aes(x=variable, y=value, color = genotype))
p + geom_point(alpha=0.5,position="jitter", size=1) +
geom_boxplot(alpha=0.75, outlier.size=0) +
theme_bw()
}
clusterGO <- function(clustNum){
##GO Enrichment on the catergories
dev.off()
plot.new()
#we need to first get the data in the right format.
#First get the list of ITAG
#sub_cluster
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
itag.sc <- as.data.frame(sub_cluster$gene)
colnames(itag.sc)[1] <- "itag"
itag.sc$sc <- 1
#Since each orthologue between tf2 and wt are represented twice in this set,
#we have to keep only the unique ITAGs.
itag.sc <- unique(itag.sc) #Check.
#Should cut the list in half. # dim(itag.sc) before and after
#Merge all by itag
matrixGO <- merge(itag.sc, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
pat <- matrixGO
#Now that we have the data in the right format we can proceed with GO enrichment.
genes = as.integer(pat[,"sc"])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.
#You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(t) #this is for the knitr document
}
clusterVis_line <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- sub_cluster[,c(1, 2, 9:14)] # just the sample types
sub_data <- melt(sub_data)
sub_data <- within(sub_data, lineGroup <- paste(genotype, gene,sep='.'))
ggplot(sub_data, aes(variable, value, group = lineGroup, color =  genotype )) +
geom_line(alpha = .1, (aes(color = factor(genotype)))) +
geom_point(alpha = .0) +
theme_bw()
}
#Prereq annotation files for function
annotation1<- read.delim("../data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
annotation1<- read.delim("../data/ITAG2.3_all_Arabidopsis_ITAG_annotations.tsv", header=FALSE)  #Changed to the SGN human readable annotation
colnames(annotation1) <- c("ITAG", "SGN_annotation")
annotation2<- read.delim ("../../../06diffGeneExp/analysis1_2014/data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
annotation2 <- read.delim("../data/ITAG2.3_all_Arabidopsis_annotated.tsv")
annotation <- merge(annotation1,annotation2, by = "ITAG")
#Only Gene Name and ITAG
annotation <- annotation[,c(1,5)]
genesInClust <- function(clustNum) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(resultsTable))
#  return(resultsTable <- unique(resultsTable))
return(unique(resultsTable))
}
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
clusterVis_PCA <- function(clustNum) {
#make dataset for visualization
data.val3 <- plot.data
names(data.val3)
data.val3$cluster[data.val3[,21] == clustNum] <- "subcluster"
data.val3$cluster[data.val3[,21] != clustNum] <- "other"
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = cluster))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#cccccc", "#000000")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold")) +
facet_grid(. ~ genotype)
}
clusterVis_PCAsub <- function(clustNum) {
#make dataset for visualization
plot.data <- subset(plot.data, ssom.unit.classif==clustNum)
data.val3 <- plot.data
#plot
p <- ggplot(data.val3, aes(PC1, PC2, color = genotype))
p + geom_point(size=I(2), alpha = 0.6) +
scale_colour_manual(values=c("#ef8a62", "#67a9cf")) +
theme_bw() +
theme(legend.text = element_text(
size = 16,
face = "bold"))
}
source("sSOM_functions.R")
plot.data <- read.table("../data/ssom.data.txt",header=TRUE)
names(plot.data)
head(plot.data)
clusterVis(1)
clusterVis_PCA(1)
clusterVis_PCAsub(1)
clusterVis_line(1)
y <- genesInClust(1)
source("sSOM_functions.R")
y <- genesInClust(1)
head(plot.data)
source("sSOM_functions.R")
genesInClust(1)
annotation <- annotation[,c(1,5)]
plot.data <- read.table("../data/ssom.data.txt",header=TRUE)
y <- genesInClust(1)
sub_cluster <- subset(plot.data, ssom.unit.classif==1)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
print(nrow(unique(resultsTable)))
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==1)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
resultsTable
unique(resultsTable)
genesInClust <- function(clustNum, plot.data, annotation) {
sub_cluster <- subset(plot.data, ssom.unit.classif==clustNum)
sub_data <- as.data.frame(sub_cluster[,2])
colnames(sub_data) <- "ITAG"
resultsTable <- merge(sub_data,annotation,by = "ITAG", all.x=TRUE)
print(nrow(unique(resultsTable)))
return(unique(resultsTable))
}
y <- genesInClust(1)
y <- genesInClust(1, plot.data, annotation)
y <- genesInClust(1, plot.data, annotation)
kable(y, format = "latex", booktabs = TRUE)
clusterGO(1)
setwd("~/git.repos/SOMexample/r")
mostDEgenes <- read.csv("../data/allGeneList_WTonly.csv.csv")
library(reshape)
library(goseq)
library(GO.db)
plot.data <- read.table("../data/ssom.data.txt",header=TRUE)
names(plot.data)
head(plot.data)
```
## Visualization
You can examine each cluster with these functions, just change the number in the function.
```{r}
clusterVis(1)
clusterVis_PCA(1)
clusterVis_PCAsub(1)
clusterVis_line(1)
y <- genesInClust(1, plot.data, annotation)
kable(y, format = "latex", booktabs = TRUE)
clusterGO(1)
library(knitr)
kable(y, format = "latex", booktabs = TRUE)
devtools::install_github("rstudio/rmarkdown")
library(knitr)
setwd("~/git.repos/SOMexample/r")
mostDEgenes <- read.csv("../data/allGeneListBothGenotypes.csv")
setwd("~/git.repos/SOMexample/r")
ls
setwd("~/Dropbox/Research/LCMProject/16endoreduplication/r")
library(gdata)
library(plyr)
library(ggplot2)
library(reshape2)
flowC = read.xls("../data/flowCytometry.xlsx", sheet = 1, header = TRUE)
names(flowC)
str(flowC)
```
```{r}
Reshape data.
#subset only what I need
names(flowC)
levels(flowC$section)
#fix typo
flowC$section <- gsub("tip ", "tip", flowC$section)
levels(flowC$section)
flowC = read.xls("../data/flowCytometry.xlsx", sheet = 1, header = TRUE)
names(flowC)
str(flowC)
dim(flowC)
names(flowC)
levels(flowC$section)
#fix typo
flowC$section <- gsub("tip ", "tip", flowC$section)
View(flowC)
# Clean up
flowCSub1 <- flowC[,c(1:6, 10:12, 15)]
names(flowCSub1)
str(flowCSub1)
flowCSub1[is.na(flowCSub1)] <- 0
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"),
variable.name = "peaks",
value.name = "flowValue")
View(flowCMelt)
flowC = read.xls("../data/flowCytometry.xlsx", sheet = 1, header = TRUE)
names(flowC)
levels(flowC$section)
#fix typo
flowC$section <- gsub("tip ", "tip", flowC$section)
# Clean up
flowCSub1 <- flowC[,c(1:6, 10:12, 15)]
names(flowCSub1)
str(flowCSub1)
flowCSub1[is.na(flowCSub1)] <- 0
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"),
variable.name = "peaks",
value.name = "flowValue")
```
## Genotype
We are not using the entire-2 data.  Only wildtype
There are two data sets 1. flowCMelt and 2.flowCSub1, make for wt only.
```{r}
flowCMelt <- subset(flowCMelt, genotype == "wt")
flowCSub1 <- subset(flowCSub1, genotype == "wt")
```
## Age
#Since age of (30 and 31) and (90 and 91) are essentially the same, I am going to collapse them.
```{r}
flowCMelt$age <- as.factor(flowCMelt$age) #treat age as factor
flowCMelt$age <- sub("31", "30", flowCMelt$age)
flowCMelt$age <- sub("91", "60", flowCMelt$age)
flowCMelt.summary <- ddply(flowCMelt, c("genotype", "peaks","age"), summarise,
N  = length(flowValue),
flowCyt = mean(flowValue),
sd = sd(flowValue),
se = sd / sqrt(N) )
flowCMelt.summary
flowCMelt$age <- as.factor(flowCMelt$age) #treat age as factor
flowCMelt$age <- sub("31", "30", flowCMelt$age)
flowCMelt$age <- sub("91", "60", flowCMelt$age)
flowCMelt.summary <- ddply(flowCMelt, c("genotype", "peaks","age"), summarise,
N  = length(flowValue),
flowCyt = mean(flowValue),
sd = sd(flowValue),
se = sd / sqrt(N) )
flowCMelt.summary
flowCSub1 <- flowC[,c(1:6, 10:12, 15)]
names(flowCSub1)
str(flowCSub1)
flowCSub1[is.na(flowCSub1)] <- 0
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"),
variable.name = "peaks",
value.name = "flowValue")
flowCMelt <- subset(flowCMelt, genotype == "wt")
flowCSub1 <- subset(flowCSub1, genotype == "wt")
```
## Age
#Since age of (30 and 31) and (90 and 91) are essentially the same, I am going to collapse them.
```{r}
flowCMelt$age <- as.factor(flowCMelt$age) #treat age as factor
flowCMelt$age <- sub("31", "30", flowCMelt$age)
flowCMelt$age <- sub("91", "60", flowCMelt$age)
flowCMelt.summary <- ddply(flowCMelt, c("genotype", "peaks","age"), summarise,
N  = length(flowValue),
flowCyt = mean(flowValue),
sd = sd(flowValue),
se = sd / sqrt(N) )
flowCMelt.summary
library(gdata)
library(plyr)
library(ggplot2)
library(reshape2)
flowC = read.xls("../data/flowCytometry.xlsx", sheet = 1, header = TRUE)
names(flowC)
str(flowC)
dim(flowC)
```
Reshape data.
```{r}
#subset only what I need
names(flowC)
levels(flowC$section)
#fix typo
flowC$section <- gsub("tip ", "tip", flowC$section)
```{r}
library(gdata)
library(plyr)
library(ggplot2)
library(reshape2)
flowC = read.xls("../data/flowCytometry.xlsx", sheet = 1, header = TRUE)
names(flowC)
str(flowC)
dim(flowC)
```
Reshape data.
```{r}
#subset only what I need
names(flowC)
levels(flowC$section)
#fix typo
flowC$section <- gsub("tip ", "tip", flowC$section)
# Clean up
flowCSub1 <- flowC[,c(1:6, 10:12, 15)]
names(flowCSub1)
str(flowCSub1)
flowCSub1[is.na(flowCSub1)] <- 0
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"),
variable.name = "peaks",
value.name = "flowValue")
```
## Genotype
We are not using the entire-2 data.  Only wildtype
There are two data sets 1. flowCMelt and 2.flowCSub1, make for wt only.
```{r}
flowCMelt <- subset(flowCMelt, genotype == "wt")
flowCSub1 <- subset(flowCSub1, genotype == "wt")
```
## Age
#Since age of (30 and 31) and (90 and 91) are essentially the same, I am going to collapse them.
```{r}
flowCMelt$age <- as.factor(flowCMelt$age) #treat age as factor
flowCMelt$age <- sub("31", "30", flowCMelt$age)
flowCMelt$age <- sub("91", "60", flowCMelt$age)
flowCMelt.summary <- ddply(flowCMelt, c("genotype", "peaks","age"), summarise,
N  = length(flowValue),
flowCyt = mean(flowValue),
sd = sd(flowValue),
se = sd / sqrt(N) )
flowCMelt
flowCMelt
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"),
variable.name = "peaks",
value.name = "flowValue")
colnames(flowCMelt)
colnames(flowCMelt)[8] <- "peaks"
colnames(flowCMelt)[9] <- "flowValue"
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"))
flowCMelt <- melt(flowCSub1, id.vars = c("leafSample", "genotype", "plant", "leaf", "section", "area", "age"))
colnames(flowCMelt)[8] <- "peaks"
colnames(flowCMelt)[9] <- "flowValue"
```
## Genotype
We are not using the entire-2 data.  Only wildtype
There are two data sets 1. flowCMelt and 2.flowCSub1, make for wt only.
```{r}
flowCMelt <- subset(flowCMelt, genotype == "wt")
flowCSub1 <- subset(flowCSub1, genotype == "wt")
```
## Age
#Since age of (30 and 31) and (90 and 91) are essentially the same, I am going to collapse them.
```{r}
flowCMelt$age <- as.factor(flowCMelt$age) #treat age as factor
flowCMelt$age <- sub("31", "30", flowCMelt$age)
flowCMelt$age <- sub("91", "60", flowCMelt$age)
flowCMelt.summary <- ddply(flowCMelt, c("genotype", "peaks","age"), summarise,
N  = length(flowValue),
flowCyt = mean(flowValue),
sd = sd(flowValue),
se = sd / sqrt(N) )
flowCMelt.summary
#Only WT
flowCMelt.summary
clear

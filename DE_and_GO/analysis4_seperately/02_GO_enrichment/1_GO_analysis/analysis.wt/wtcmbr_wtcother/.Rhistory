)
)
scwt <- subset(sub_cluster, genotype == "wt")
print(paste("total number of genes specific to wt is ",
nrow(scwt)
)
)
sctf2 <- subset(sub_cluster, genotype == "tf2")
print(paste("total number of genes specific to tf2 is ",
nrow(sctf2)
)
)
print(paste("There are",
length(intersect(scwt$gene, sctf2$gene)),
" that are the same between wt and tf2"
)
)
##Venn Diagram part
grid.newpage()
venn.plot <- draw.pairwise.venn(area1 = nrow(scwt),
area2    = nrow(sctf2),
cross.area = length(intersect(scwt$gene, sctf2$gene)),
scaled       = F,
category     = c("Wildtype", "tf2"),
fill         = c("blue", "red"),
alpha        = 0.3,
lty          = "blank",
cex          = 2,
cat.cex      = 2,
cat.pos      = c(315, 15),
cat.dist     = 0.09,
cat.just     = list(c(-1, -1), c(1, 1)),
ext.pos      = 30,
ext.dist     = -0.05,
ext.length   = 0.85)
grid.draw(venn.plot)
}
clusterVis(1)
clusterNum(1)
clusterNum <- function(clustNum){
sub_cluster <- subset(plot.data, som.unit.classif==clustNum)
print(paste("total number of genes in sub cluster is ",
nrow(sub_cluster)
)
)
scwt <- subset(sub_cluster, genotype == "wt")
print(paste("total number of genes specific to wt is ",
nrow(scwt)
)
)
sctf2 <- subset(sub_cluster, genotype == "tf2")
print(paste("total number of genes specific to tf2 is ",
nrow(sctf2)
)
)
print(paste("There are",
length(intersect(scwt$gene, sctf2$gene)),
" that are the same between wt and tf2"
)
)
##Venn Diagram part
grid.newpage()
venn.plot <- draw.pairwise.venn(area1 = nrow(scwt),
area2    = nrow(sctf2),
cross.area = length(intersect(scwt$gene, sctf2$gene)),
scaled       = F,
category     = c("Wildtype", "tf2"),
fill         = c("blue", "red"),
alpha        = 0.3,
lty          = "blank",
cex          = 2,
cat.cex      = 2,
cat.pos      = c(315, 20),
cat.dist     = 0.09,
cat.just     = list(c(-1, -1), c(1, 1)),
ext.pos      = 30,
ext.dist     = -0.05,
ext.length   = 0.85)
grid.draw(venn.plot)
}
clusterVis(1)
clusterNum(1)
clusterNum <- function(clustNum){
sub_cluster <- subset(plot.data, som.unit.classif==clustNum)
print(paste("total number of genes in sub cluster is ",
nrow(sub_cluster)
)
)
scwt <- subset(sub_cluster, genotype == "wt")
print(paste("total number of genes specific to wt is ",
nrow(scwt)
)
)
sctf2 <- subset(sub_cluster, genotype == "tf2")
print(paste("total number of genes specific to tf2 is ",
nrow(sctf2)
)
)
print(paste("There are",
length(intersect(scwt$gene, sctf2$gene)),
" that are the same between wt and tf2"
)
)
##Venn Diagram part
grid.newpage()
venn.plot <- draw.pairwise.venn(area1 = nrow(scwt),
area2    = nrow(sctf2),
cross.area = length(intersect(scwt$gene, sctf2$gene)),
scaled       = F,
category     = c("Wildtype", "tf2"),
fill         = c("blue", "red"),
alpha        = 0.3,
lty          = "blank",
cex          = 2,
cat.cex      = 2,
cat.pos      = c(315, 25),
cat.dist     = 0.09,
cat.just     = list(c(-1, -1), c(1, 1)),
ext.pos      = 30,
ext.dist     = -0.05,
ext.length   = 0.85)
grid.draw(venn.plot)
}
clusterVis(1)
clusterNum(1)
clusterNum(2)
clusterNum(3)
clusterNum(4)
clusterNum(5)
clusterNum(6)
clusterNum(6)
clusterNum(5)
clusterNum(6)
clusterNum(4)
clusterNum(1)
clusterNum(1)
clusterNum <- function(clustNum){
sub_cluster <- subset(plot.data, som.unit.classif==clustNum)
print(paste("total number of genes in sub cluster is ",
nrow(sub_cluster)
)
)
scwt <- subset(sub_cluster, genotype == "wt")
print(paste("total number of genes in wt cluster is ",
nrow(scwt)
)
)
sctf2 <- subset(sub_cluster, genotype == "tf2")
print(paste("total number of genes in tf2 cluster is ",
nrow(sctf2)
)
)
print(paste("There are",
length(intersect(scwt$gene, sctf2$gene)),
" that are the same between wt and tf2"
)
)
##Venn Diagram part
grid.newpage()
venn.plot <- draw.pairwise.venn(area1 = nrow(scwt),
area2    = nrow(sctf2),
cross.area = length(intersect(scwt$gene, sctf2$gene)),
scaled       = F,
category     = c("Wildtype", "tf2"),
fill         = c("blue", "red"),
alpha        = 0.3,
lty          = "blank",
cex          = 2,
cat.cex      = 2,
cat.pos      = c(315, 25),
cat.dist     = 0.09,
cat.just     = list(c(-1, -1), c(1, 1)),
ext.pos      = 30,
ext.dist     = -0.05,
ext.length   = 0.85)
grid.draw(venn.plot)
}
clusterVis(1)
clusterNum(1)
sub_cluster
head(sub_cluster)
head(sub_cluster$gene)
library(yaml)
setwd("~/Dropbox/Research/LCMProject/07GO_enrichment/analysis/2014.6.12_analysis.wt/wtcmbr_wtcother")
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
library(GO.db)
sigOnly <- read.table(paste(sample1,"_",sample2,"_DE_sig.txt", sep=""), header = TRUE, fill = TRUE)
sigOnly$logFC <- as.numeric(as.character(sigOnly$logFC))
colnames(sigOnly)[1] <- "itag"
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
genes <- subset(geneLength, select = c(itag))
head(genes)
genes <- subset(geneLength, select = c(itag))
geneLength <- read.csv("../normalized_genes_length.csv")
setwd("~/Dropbox/Research/LCMProject/07GO_enrichment/analysis/2014.6.12_analysis.wt/wtcmbr_wtcother")
geneLength <- read.csv("../normalized_genes_length.csv")
geneLength <- read.csv("../requisiteData/normalized_genes_length.csv")
geneLength <- read.csv("../../requisiteData/normalized_genes_length.csv")
geneLength <- read.csv("../../../requisiteData/normalized_genes_length.csv")
head(geneLength)
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
```
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
head(matrixGO)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matricGOupdown)
head(matrixGOupdown)
head(sctf2)
itag.sc <- sub_cluster$gene
itag.sc
itag.sc <- as.matrix(sub_cluster$gene)
itag.sc
itag.sc <- as.data.frame(sub_cluster$gene)
head(itag.sc)
colnames(itag.sc)[1] <- "itag"
head(itag.sc)
itag.sc$sc <- 1
head(itag.sc)
itag.scwt <- as.data.frame(scwt$gene)
colnames(itag.scwt)[1] <- "itag"
itag.scwt$wt <- 1
itag.sctf2 <- as.data.frame(sctf2$gene)
colnames(itag.sctf2)[1] <- "itag"
itag.sctf2$tf2 <- 1
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
geneLength <- read.csv("../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
geneLength <- read.csv("../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
setwd("~/Dropbox/Research/LCMProject/08SOM/lcmSOM/r")
geneLength <- read.csv("../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
geneLength <- read.csv("../../../07GO_enrichment/requisiteData/normalized_genes_length.csv")
plot.data <- read.table("../data/analysis1.som.data.small.ALLD.txt",header=TRUE)
scIntersect <- intersect(scwt$gene, sctf2$gene)
head(scIntersect)
scIntersect
scIntersect <- as.data.frame(intersect(scwt$gene, sctf2$gene))
scIntersect
scIntersect$gene <- as.data.frame(intersect(scwt$gene, sctf2$gene))
scIntersect
clusterVis(2)
clusterNum(2)
```
scIntersect <- as.data.frame(intersect(scwt$gene, sctf2$gene))
itag.scIntersect <- as.data.frame(scIntersect[1])
colnames(itag.scIntersect)[1] <- "itag"
colnames(itag.scIntersect)[1] <- "itag"
itag.scIntersect$intersect <- 1
head(itag.scIntersect)
genes <- subset(geneLength, select = c(itag))
head(geneLength)
upITAGmerge <- merge(itag.scIntersect, itag.scwt, by = "itag", all= TRUE)
ITAGmerge1 <- merge(itag.scIntersect, itag.scwt, by = "itag", all= TRUE)
head(ITAGmerge1)
ITAGmerge1
ITAGmerge <- merge(ITAGmerge, itag.sctf2, by = "itag", all = TRUE)
ITAGmerge <- merge(itag.scIntersect, itag.scwt, by = "itag", all= TRUE)
ITAGmerge <- merge(ITAGmerge, itag.sctf2, by = "itag", all = TRUE)
ITAGmerge
head(ITAGmerge)
ITAGmerge <- merge(ITAGmerge, geneLength, by = "itag", all = TRUE)
head(ITAGmerge)
matrixGO <- merge(ITAGmerge, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
matrixGO
cate <- read.table("../../../07GO_enrichment/requisiteData/melted.GOTable.txt",header=TRUE)
head(matrixGO)
sigType <- c("intersect", "wt", "tf2")
clusterNum(1)
itag.sc <- as.data.frame(sub_cluster$gene)
colnames(itag.sc)[1] <- "itag"
itag.sc$sc <- 1
#scwt
itag.scwt <- as.data.frame(scwt$gene)
colnames(itag.scwt)[1] <- "itag"
itag.scwt$wt <- 1
#sctf2
itag.sctf2 <- as.data.frame(sctf2$gene)
colnames(itag.sctf2)[1] <- "itag"
itag.sctf2$tf2 <- 1
itag.scIntersect <- as.data.frame(scIntersect[1])
colnames(itag.scIntersect)[1] <- "itag"
itag.scIntersect$intersect <- 1
#Merge all by itag
ITAGmerge <- merge(itag.scIntersect, itag.scwt, by = "itag", all= TRUE)
ITAGmerge <- merge(ITAGmerge, itag.sctf2, by = "itag", all = TRUE)
matrixGO <- merge(ITAGmerge, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
pat <- matrixGO
head(pat)
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
}
library(GO.db)
library(goseq)
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
}
detach("package:goseq", unload=TRUE)
library("goseq", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sigType <- c("intersect", "wt", "tf2")
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
}
}
sigType <- c("intersect", "wt", "tf2")
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
}
setwd("~/Dropbox/Research/LCMProject/07GO_enrichment/analysis/2014.6.12_analysis.wt/wtcmbr_wtcother")
geneLength <- read.csv("../../../requisiteData/normalized_genes_length.csv")
head(geneLength)
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
sigType <- c("up", "down", "all")
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_",type,"_GO.txt", sep=""))
}
source("http://bioconductor.org/biocLite.R")
biocLite("goseq")
source("http://bioconductor.org/biocLite.R")
biocLite("goseq")
clusterNum <- function(clustNum){
sub_cluster <- subset(plot.data, som.unit.classif==clustNum)
print(paste("total number of genes in sub cluster is ",
nrow(sub_cluster)
)
)
scwt <- subset(sub_cluster, genotype == "wt")
print(paste("total number of genes in wt cluster is ",
nrow(scwt)
)
)
sctf2 <- subset(sub_cluster, genotype == "tf2")
print(paste("total number of genes in tf2 cluster is ",
nrow(sctf2)
)
)
scIntersect <- as.data.frame(intersect(scwt$gene, sctf2$gene))
print(paste("There are",
length(intersect(scwt$gene, sctf2$gene)),
" that are the same between wt and tf2"
)
)
##Venn Diagram part
grid.newpage()
venn.plot <- draw.pairwise.venn(area1 = nrow(scwt),
area2    = nrow(sctf2),
cross.area = length(intersect(scwt$gene, sctf2$gene)),
scaled       = F,
category     = c("Wildtype", "tf2"),
fill         = c("blue", "red"),
alpha        = 0.3,
lty          = "blank",
cex          = 2,
cat.cex      = 2,
cat.pos      = c(315, 25),
cat.dist     = 0.09,
cat.just     = list(c(-1, -1), c(1, 1)),
ext.pos      = 30,
ext.dist     = -0.05,
ext.length   = 0.85)
grid.draw(venn.plot)
##GO Enrichment on the catergories
#we need to first get the data in the right format.
#First get the list of ITAG,
#sub_cluster
itag.sc <- as.data.frame(sub_cluster$gene)
colnames(itag.sc)[1] <- "itag"
itag.sc$sc <- 1
#scwt
itag.scwt <- as.data.frame(scwt$gene)
colnames(itag.scwt)[1] <- "itag"
itag.scwt$wt <- 1
#sctf2
itag.sctf2 <- as.data.frame(sctf2$gene)
colnames(itag.sctf2)[1] <- "itag"
itag.sctf2$tf2 <- 1
#Intersect
itag.scIntersect <- as.data.frame(scIntersect[1])
colnames(itag.scIntersect)[1] <- "itag"
itag.scIntersect$intersect <- 1
#Merge all by itag
ITAGmerge <- merge(itag.scIntersect, itag.scwt, by = "itag", all= TRUE)
ITAGmerge <- merge(ITAGmerge, itag.sctf2, by = "itag", all = TRUE)
matrixGO <- merge(ITAGmerge, geneLength, by = "itag", all = TRUE)
matrixGO[is.na(matrixGO)] <- 0
pat <- matrixGO
#Now that we have the data in the right format we can proceed with GO enrichment.
#First specify vector to loop over for each column
sigType <- c("intersect", "wt", "tf2")
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#This is going to correct for multiple testing.  You can specify the p-value cut-off of GO categories you are interested.
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
print(type) #this is for the knitr document
print(t) #this is for the knitr document
}
}
clusterNum(1)

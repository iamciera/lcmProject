FirstTwo("Galanthus peshmenii A.P.Davis & C.D.Brickell")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
itagSeqs <- read.DNAStringSet("../SlCDS_ITAG2.3_pseudoGMAP5V61passNoDif.fa")
itagSeqs <- read.DNAStringSet("../Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet("/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- DNAStringSet("/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet("/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet(/Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta, "fasta")
itagSeqs <- read.DNAStringSet(Users/iamciera/Dropbox/Research/LCMProject/04RNAseqAnalysis/BWA/ITAG2.4_cds.fasta, "fasta")
itagSeqs <- read.DNAStringSet(ITAG2.4_cds.fasta, "fasta")
itagSeqs <- read.FASTA("ITAG2.4_cds.fasta")
library(Biostrings)
?readFASTA
??readFASTA
itagSeqs <- read.FASTA("ITAG2.4_cds.fasta")
itagSeqs <- read.fasta(file = system.file("ITAG2.4_cds.fasta", package = "seqinr")
d
itagSeqs <- read.fasta(file = system.file("ITAG2.4_cds.fasta", package = "seqinr"))
library(Biostrings)
itagSeqs <- read.FASTA("ITAG2.4_cds.fasta")
itagSeqs <- read.DNAStringSet("ITAG2.4_cds.fasta")
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/tf2cmbr_wtcmbr")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/waother_wtcother")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtambr_wtaother")
source('~/.active-rstudio-document', echo=TRUE)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtambr_wtbmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtambr_wtcmbr")
library(rmarkdown)
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtaother_wbother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtbmbr_wtbother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtbmbr_wtcmbr")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtbother_wcother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtbother_wcother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtcmbr_wtcother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/tf2cmbr_wtcmbr")
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
library(goseq)
library(GO.db)
sigOnly <- read.table(paste(sample1,"_",sample2,"_DE_sig.txt", sep=""), header = TRUE, fill = TRUE)
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
colnames(sigOnly)[1] <- "itag"
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
```
###Merge I - with normalized ITAG length gene list
read in guide.
```{r}
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
dim(upITAGmerge)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
dim(downITAGmerge)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
dim(allITAGmerge)
head(allITAGmerge)
```
###Merge II - Merge them all together.
```{r}
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
```
###Clean Up
```{r}
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
```
This is if you want to write out the table.
write.table(matrixGO, "mydata.txt", sep="\t", quote= FALSE)
GO enrichment
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$all)
names(genes) = pat$itag
table(genes)
length(genes)
```
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_all_GO.txt", sep=""))
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_all_GO.txt", sep=""))
```{r}
genes = as.integer(pat$up)
names(genes) = pat$itag
table(genes)
length(genes)
```
The PWF is calculated by ﬁtting a monotonic spline to the binary data series of diﬀerential expression.  A monotonic spline is a specific type of cubic spline, which fits continuous functions through discrete data. Monotonicity preserves order between ordered sets. This is the point in which gene length is taken into account.
The `nullp()` function is finding the null distribution... The nullp plots the fit of the null distribution to the data.  This is a quality control step and want to check the goodness of fit to the data.
```{r}
pwf = nullp(genes,bias.data=pat$length)
```
```{r}
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
```{r}
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_up_GO.txt", sep=""))
```
Specify the column you are interested in `pat$all` refers to all the DE gene regardless if they are up or down regulated. If you want to specify down regulated, specify `pat$down`.
```{r}
genes = as.integer(pat$down)
names(genes) = pat$itag
table(genes)
length(genes)
```
The PWF is calculated by ﬁtting a monotonic spline to the binary data series of diﬀerential expression.  A monotonic spline is a specific type of cubic spline, which fits continuous functions through discrete data. Monotonicity preserves order between ordered sets. This is the point in which gene length is taken into account.
The `nullp()` function is finding the null distribution... The nullp plots the fit of the null distribution to the data.  This is a quality control step and want to check the goodness of fit to the data.
```{r}
pwf = nullp(genes,bias.data=pat$length)
```
```{r}
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
```
Here is where you can specify the p-value cut-off
```{r}
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
```
```{r}
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_down_GO.txt", sep=""))
```
sigType <- c("up", "down", "all")
sigType <- c("up", "down", "all")
for(i in sigType) {
genes = as.integer(pat$sigType[i])
names(genes) = pat$itag
table(genes)
length(genes)
#The PWF is calculated by ﬁtting a monotonic spline to the binary data series of diﬀerential expression.  A monotonic spline is a specific type of cubic spline, which fits continuous functions through discrete data. Monotonicity preserves order between ordered sets. This is the point in which gene length is taken into account.
#The `nullp()` function is finding the null distribution... The nullp plots the fit of the null distribution to the data.  This is a quality control step and want to check the goodness of fit to the data.
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#Here is where you can specify the p-value cut-off
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_",sigType[i],"_GO.txt", sep=""))
```
sigType <- c("up", "down", "all")
for(i in sigType) {
genes = as.integer(pat$sigType[i])
names(genes) = pat$itag
table(genes)
length(genes)
#The PWF is calculated by ﬁtting a monotonic spline to the binary data series of diﬀerential expression.  A monotonic spline is a specific type of cubic spline, which fits continuous functions through discrete data. Monotonicity preserves order between ordered sets. This is the point in which gene length is taken into account.
#The `nullp()` function is finding the null distribution... The nullp plots the fit of the null distribution to the data.  This is a quality control step and want to check the goodness of fit to the data.
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#Here is where you can specify the p-value cut-off
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_",sigType[i],"_GO.txt", sep=""))
}
sigType <- c("up", "down", "all")
for(type in sigType) {
genes = as.integer(pat[,type])
names(genes) = pat$itag
table(genes)
length(genes)
#The PWF is calculated by ﬁtting a monotonic spline to the binary data series of diﬀerential expression.  A monotonic spline is a specific type of cubic spline, which fits continuous functions through discrete data. Monotonicity preserves order between ordered sets. This is the point in which gene length is taken into account.
#The `nullp()` function is finding the null distribution... The nullp plots the fit of the null distribution to the data.  This is a quality control step and want to check the goodness of fit to the data.
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
head(GO.wall)
#Here is where you can specify the p-value cut-off
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
enriched.GO
my.GO <- as.character(enriched.GO)
my.GO.table <- Term(my.GO)
my.GO.table
t <- as.matrix(my.GO.table)
write.table(t, file=paste(sample1,"_",sample2,"DE1_sigonly_",type,"_GO.txt", sep=""))
}
setwd("~/Dropbox/GO_enrichment/tf2cmbr_wtcmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/waother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/waother_wtcother")
library(rmarkdown)
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
head(GO.wall)
genes = as.integer(pat$all) #this is where the specific gene column type is specified.
pat <- matrixGO
library(yaml)
yamls <- yaml.load_file("de.yml")
sample1 <- yamls$sample1
sample2 <- yamls$sample2
sample1
sample2
library(goseq)
library(GO.db)
sigOnly <- read.table(paste(sample1,"_",sample2,"_DE_sig.txt", sep=""), header = TRUE, fill = TRUE)
head(sigOnly)
dim(sigOnly)
colnames(sigOnly)
colnames(sigOnly)[1] <- "itag" #rename to itag which is lowercase.
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
dim(upITAGmerge)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
dim(downITAGmerge)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
dim(allITAGmerge)
head(allITAGmerge)
head(allITAGmerge)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
head(sigOnly)
colnames(sigOnly)
colnames(sigOnly)[1] <- "itag" #rename to itag which is lowercase.
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
sigOnly
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
str(sigOnly)
sigOnly <- read.table(paste(sample1,"_",sample2,"_DE_sig.txt", sep=""), header = TRUE, fill = TRUE)
colnames(sigOnly)
str(sigOnly)
as.numeric(as.character(sigOnly$logFC))
as.numeric(as.character(sigOnly$logFC))
colnames(sigOnly)[1] <- "itag" #rename to itag which is lowercase.
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
sigOnly$logFC <- as.numeric(as.character(sigOnly$logFC))
colnames(sigOnly)[1] <- "itag" #rename to itag which is lowercase.
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
colnames(sigOnly)[1] <- "itag" #rename to itag which is lowercase.
upITAG <- subset(sigOnly, logFC > 0, select = c(itag))
upITAG$up <- 1
downITAG <- subset(sigOnly, logFC < 0, select = c(itag))
downITAG$down <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
allITAG <- subset(sigOnly, select = c(itag))
allITAG$all <- 1
geneLength <- read.csv("../normalized_genes_length.csv")
head(geneLength)
genes <- subset(geneLength, select = c(itag))
upITAGmerge <- merge(genes, upITAG, by = "itag", all= TRUE)
downITAGmerge <- merge(genes, downITAG, by = "itag", all= TRUE)
allITAGmerge <- merge(genes, allITAG, by = "itag", all= TRUE)
head(allITAGmerge)
matrixGOupdown <- merge(upITAGmerge, downITAGmerge, by = "itag", all = TRUE)
head(matrixGOupdown)
matrixGOupdownall <- merge(matrixGOupdown, allITAG, by = "itag", all = TRUE)
head(matrixGOupdownall)
matrixGO <- merge(matrixGOupdownall, geneLength, by = "itag", all = TRUE)
head(matrixGO)
matrixGO[is.na(matrixGO)] <- 0
head(matrixGO)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
genes = as.integer(pat$all) #this is where the specific gene column type is specified.
names(genes) = pat$itag
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
GO.wall = goseq(pwf,gene2cat = cate)
library(goseq)
library(GO.db)
pwf = nullp(genes,bias.data=pat$length)
table(genes)
length(genes)
pwf = nullp(genes,bias.data=pat$length)
head(genes)
pat <- matrixGO
head(pat)
cate <- read.table("../melted.GOTable.txt",header=TRUE)
head(cate)
genes = as.integer(pat$all) #this is where the specific gene column type is specified.
names(genes) = pat$itag
table(genes)
length(genes)
head(genes)
pwf = nullp(genes,bias.data=pat$length)
setwd("~/Dropbox/GO_enrichment/tf2cmbr_wtcmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
enriched.GO
enriched.GO
print(head(GO.wall))
print(head(GO.wall, 20))
enriched.GO
enriched.GO
my.GO.table <- Term(my.GO)
?Term
?Term()
?Term()
t <- as.matrix(my.GO.table)
print(head(GO.wall))
my.GO.table
t <- as.matrix(my.GO.table)
colnames(t)[1] <- "category"
t
colnames(t)[0] <- "category"
t
rownames(t)[1] <- "category"
t
t <- as.matrix(my.GO.table)
t
colnames(t)[1] <- "category"
t
colnames(t)[1] <- "definition"
colnames(t)[1] <- "definition"
t
t <- as.matrix(my.GO.table)
t
colnames(t)[1] <- "definition"
t
colnames(t)[1] <- "category"
t <- as.matrix(my.GO.table)
t <- table(my.GO.table)
t
t <- as.matrix(my.GO.table)
t
rownames(t)[1] <- "category"
t
colnames(t)[1,] <- "category"
colnames(t)[] <- "category"
t
colnames(t)[,1] <- "category"
colnames(t)[1] <- "category"
t
t <- as.matrix(my.GO.table)
t
colnames(t)[1] <- "category"
t
colnames
?colnames
?colnames()
t <- as.matrix(my.GO.table)
t
colnames(t$) <- "category"
t <- as.matrix(my.GO.table)
t <- as.matrix(my.GO.table)
t
colnames(t)[1] <- "category"
t
my.GO.table
t <- matrix(my.GO.table)
t
colnames(t)[1] <- "category"
t
t <-  as.matrix(my.GO.table)
t
library(reshape)
library(reshape2)
t = transform(t, category = colsplit(t, split = " ", names = c(definition)))
?colsplit
t <-  as.matrix(my.GO.table)
colsplit(t, " ", c("category", "definition" ) )
t <-  as.matrix(my.GO.table)
t
colsplit(t, """, c("category", "definition" ) )
colsplit(t, "  ", c("category", "definition" ) )
t <-  as.matrix(my.GO.table)
t
dim(t)
colsplit(t, "R", c("category", "definition" ) )
t
t <- colsplit(t, "R", c("category", "definition" ) )
t
t <-  as.matrix(my.GO.table)
library(reshape2)
t <- colsplit(t, "R", c("category", "definition" ) )
t
t <-  as.matrix(my.GO.table)
t
t <- colsplit(t, ":", c("category", "definition" ) )
t
t <-  as.matrix(my.GO.table)
t
t <- colsplit(t, ":", c() )
t
as.matrix()
?as.matrix()
t <-  as.matrix(my.GO.table, ncol = 2)
t
dim(t)
t <- as.matrix(my.GO.table, ncol = 2)
dim(t)
my.GO.table
dim(my.GO.table)
str(my.GO.table)
t <- as.matrix(my.GO.table)
enriched.GO
p.adjust(GO.wall$over_represented_pvalue, method = "BH")
enriched.GO = GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH")]
enriched.GO
head(enriched.GO)
GO.wall$category[p.adjust(GO.wall$over_represented_pvalue, method = "BH") < 0.05]
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/tf2cmbr_wtcmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/diffGeneExp/2014.6.6_analysis/wtaother_wtcother")
render("skeletonDE.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","DE.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/waother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtambr_wtaother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtambr_wtbmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtambr_wtcmbr")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtaother_wtbother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtaother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtaother_wtcother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
setwd("~/Dropbox/GO_enrichment/wtbmbr_wtbother")
render("skeleton_GO.Rmd", "pdf_document", output_file = paste(sample1,"_",sample2,"_","GO.pdf",sep=""))
